{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "table",
  "type": "registry:ui",
  "title": "Table",
  "description": "A responsive table component.",
  "registryDependencies": [
    "table",
    "https://eco-design-system-2.vercel.app/r/themes/theme.json"
  ],
  "files": [
    {
      "path": "src/components/ui/table.tsx",
      "content": "\"use client\";\n\nimport type * as React from \"react\";\nimport { forwardRef, useCallback, useEffect, useRef } from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\n// Enhanced Table component with TypeScript generics and accessibility\ninterface TableProps extends React.ComponentProps<\"table\"> {\n  /** Whether the table is in a loading state */\n  isLoading?: boolean;\n  /** Whether the table has an empty state */\n  isEmpty?: boolean;\n  /** Custom loading component */\n  loadingComponent?: React.ReactNode;\n  /** Custom empty state component */\n  emptyComponent?: React.ReactNode;\n  /** Whether to enable sticky headers */\n  stickyHeaders?: boolean;\n  /** Whether to enable horizontal scroll on mobile */\n  enableHorizontalScroll?: boolean;\n  /** Custom container class name */\n  containerClassName?: string;\n  /** Table variant for different use cases */\n  variant?: \"default\" | \"data-table\" | \"compact\";\n  /** ARIA label for the table */\n  ariaLabel?: string;\n  /** ARIA described by for additional context */\n  ariaDescribedBy?: string;\n  /** Role for the table (defaults to table) */\n  role?: string;\n}\n\nconst Table = forwardRef<HTMLTableElement, TableProps>(\n  (\n    {\n      className,\n      containerClassName,\n      isLoading = false,\n      isEmpty = false,\n      loadingComponent,\n      emptyComponent,\n      stickyHeaders = false,\n      enableHorizontalScroll = true,\n      variant = \"default\",\n      ariaLabel,\n      ariaDescribedBy,\n      role = \"table\",\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const containerRef = useRef<HTMLDivElement>(null);\n    const tableRef = useRef<HTMLTableElement>(null);\n\n    // Combine refs\n    const combinedRef = useCallback(\n      (node: HTMLTableElement) => {\n        if (typeof ref === \"function\") {\n          ref(node);\n        } else if (ref) {\n          ref.current = node;\n        }\n        tableRef.current = node;\n      },\n      [ref]\n    );\n\n    // Handle keyboard navigation\n    useEffect(() => {\n      const table = tableRef.current;\n      if (!table) return;\n\n      const handleKeyDown = (event: KeyboardEvent) => {\n        const target = event.target as HTMLElement;\n\n        // Only handle keyboard navigation within table cells\n        if (!target.closest('td, th')) return;\n\n        switch (event.key) {\n          case 'ArrowRight':\n            event.preventDefault();\n            const nextCell = target.parentElement?.nextElementSibling?.querySelector('td, th');\n            if (nextCell) (nextCell as HTMLElement).focus();\n            break;\n          case 'ArrowLeft':\n            event.preventDefault();\n            const prevCell = target.parentElement?.previousElementSibling?.querySelector('td, th');\n            if (prevCell) (prevCell as HTMLElement).focus();\n            break;\n          case 'ArrowDown':\n            event.preventDefault();\n            const nextRow = target.parentElement?.nextElementSibling;\n            if (nextRow) {\n              const cellAtIndex = nextRow.children[Array.from(target.parentElement!.children).indexOf(target)];\n              if (cellAtIndex) (cellAtIndex as HTMLElement).focus();\n            }\n            break;\n          case 'ArrowUp':\n            event.preventDefault();\n            const prevRow = target.parentElement?.previousElementSibling;\n            if (prevRow) {\n              const cellAtIndex = prevRow.children[Array.from(target.parentElement!.children).indexOf(target)];\n              if (cellAtIndex) (cellAtIndex as HTMLElement).focus();\n            }\n            break;\n        }\n      };\n\n      table.addEventListener('keydown', handleKeyDown);\n      return () => table.removeEventListener('keydown', handleKeyDown);\n    }, []);\n\n    const defaultLoadingComponent = (\n      <div\n        className=\"flex items-center justify-center p-8\"\n        role=\"status\"\n        aria-label=\"Loading table data\"\n      >\n        <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-current\"></div>\n        <span className=\"ml-2 text-sm text-muted-foreground\">Loading...</span>\n      </div>\n    );\n\n    const defaultEmptyComponent = (\n      <div\n        className=\"flex items-center justify-center p-8 text-muted-foreground\"\n        role=\"status\"\n        aria-label=\"No data available\"\n      >\n        <span className=\"text-sm\">No data available</span>\n      </div>\n    );\n\n    const tableClasses = cn(\n      \"w-full caption-bottom text-sm\",\n      // Variant-specific styles\n      {\n        \"table-fixed\": variant === \"compact\",\n        \"table-auto\": variant === \"default\" || variant === \"data-table\",\n      },\n      className\n    );\n\n    const containerClasses = cn(\n      \"relative w-full\",\n      {\n        \"overflow-x-auto\": enableHorizontalScroll,\n        \"overflow-hidden\": !enableHorizontalScroll,\n      },\n      containerClassName\n    );\n\n    return (\n      <div\n        ref={containerRef}\n        data-slot=\"table-container\"\n        className={containerClasses}\n        style={{\n          // CSS custom properties for theming\n          '--table-border-color': 'hsl(var(--border))',\n          '--table-header-bg': 'hsl(var(--component-medium))',\n          '--table-row-hover-bg': 'hsl(var(--component-light))',\n          '--table-row-selected-bg': 'hsl(var(--component-light))',\n          '--table-text-color': 'hsl(var(--foreground))',\n          '--table-muted-text-color': 'hsl(var(--muted-foreground))',\n        } as React.CSSProperties}\n      >\n        {isLoading ? (\n          loadingComponent || defaultLoadingComponent\n        ) : isEmpty ? (\n          emptyComponent || defaultEmptyComponent\n        ) : (\n          <table\n            ref={combinedRef}\n            data-slot=\"table\"\n            className={tableClasses}\n            role={role}\n            aria-label={ariaLabel}\n            aria-describedby={ariaDescribedBy}\n            tabIndex={0}\n            {...props}\n          >\n            {children}\n          </table>\n        )}\n      </div>\n    );\n  }\n);\n\nTable.displayName = \"Table\";\n\ninterface TableHeaderProps extends React.ComponentProps<\"thead\"> {\n  /** Whether this header should be sticky */\n  sticky?: boolean;\n  /** ARIA label for the header section */\n  ariaLabel?: string;\n}\n\nconst TableHeader = forwardRef<HTMLTableSectionElement, TableHeaderProps>(\n  ({ className, sticky = false, ariaLabel, ...props }, ref) => {\n    return (\n      <thead\n        ref={ref}\n        data-slot=\"table-header\"\n        className={cn(\n          \"[&_tr]:border-b\",\n          {\n            \"sticky top-0 z-10\": sticky,\n          },\n          className\n        )}\n        aria-label={ariaLabel}\n        {...props}\n      />\n    );\n  }\n);\n\nTableHeader.displayName = \"TableHeader\";\n\ninterface TableBodyProps extends React.ComponentProps<\"tbody\"> {\n  /** ARIA label for the body section */\n  ariaLabel?: string;\n  /** Whether to enable row virtualization for large datasets */\n  virtualized?: boolean;\n}\n\nconst TableBody = forwardRef<HTMLTableSectionElement, TableBodyProps>(\n  ({ className, ariaLabel, virtualized = false, ...props }, ref) => {\n    return (\n      <tbody\n        ref={ref}\n        data-slot=\"table-body\"\n        className={cn(\n          \"[&_tr:last-child]:border-0\",\n          {\n            \"overflow-y-auto\": virtualized,\n          },\n          className\n        )}\n        aria-label={ariaLabel}\n        {...props}\n      />\n    );\n  }\n);\n\nTableBody.displayName = \"TableBody\";\n\ninterface TableFooterProps extends React.ComponentProps<\"tfoot\"> {\n  /** ARIA label for the footer section */\n  ariaLabel?: string;\n  /** Whether this footer should be sticky */\n  sticky?: boolean;\n}\n\nconst TableFooter = forwardRef<HTMLTableSectionElement, TableFooterProps>(\n  ({ className, ariaLabel, sticky = false, ...props }, ref) => {\n    return (\n      <tfoot\n        ref={ref}\n        data-slot=\"table-footer\"\n        className={cn(\n          \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n          {\n            \"sticky bottom-0 z-10\": sticky,\n          },\n          className,\n        )}\n        aria-label={ariaLabel}\n        {...props}\n      />\n    );\n  }\n);\n\nTableFooter.displayName = \"TableFooter\";\n\ninterface TableRowProps extends React.ComponentProps<\"tr\"> {\n  /** Whether this row is selectable */\n  selectable?: boolean;\n  /** Whether this row is currently selected */\n  selected?: boolean;\n  /** ARIA label for the row */\n  ariaLabel?: string;\n  /** Role for the row (defaults to row) */\n  role?: string;\n  /** Whether this row is interactive */\n  interactive?: boolean;\n}\n\nconst TableRow = forwardRef<HTMLTableRowElement, TableRowProps>(\n  ({\n    className,\n    selectable = false,\n    selected = false,\n    ariaLabel,\n    role = \"row\",\n    interactive = false,\n    ...props\n  }, ref) => {\n    return (\n      <tr\n        ref={ref}\n        data-slot=\"table-row\"\n        data-state={selected ? \"selected\" : undefined}\n        data-selectable={selectable ? \"true\" : undefined}\n        data-interactive={interactive ? \"true\" : undefined}\n        className={cn(\n          \"border-b transition-colors\",\n          {\n            \"hover:bg-component-light\": interactive || selectable,\n            \"bg-component-light\": selected,\n            \"cursor-pointer\": interactive || selectable,\n            \"focus-within:bg-component-light\": selectable,\n          },\n          className,\n        )}\n        role={role}\n        aria-label={ariaLabel}\n        tabIndex={selectable || interactive ? 0 : undefined}\n        {...props}\n      />\n    );\n  }\n);\n\nTableRow.displayName = \"TableRow\";\n\ninterface TableHeadProps extends React.ComponentProps<\"th\"> {\n  /** Whether this header is sortable */\n  sortable?: boolean;\n  /** Current sort direction */\n  sortDirection?: \"asc\" | \"desc\" | null;\n  /** ARIA label for the header */\n  ariaLabel?: string;\n  /** Whether this header should be sticky */\n  sticky?: boolean;\n  /** Role for the header (defaults to columnheader) */\n  role?: string;\n  /** Column scope for accessibility */\n  scope?: \"col\" | \"row\" | \"colgroup\" | \"rowgroup\";\n}\n\nconst TableHead = forwardRef<HTMLTableCellElement, TableHeadProps>(\n  ({\n    className,\n    sortable = false,\n    sortDirection,\n    ariaLabel,\n    sticky = false,\n    role = \"columnheader\",\n    scope = \"col\",\n    ...props\n  }, ref) => {\n    return (\n      <th\n        ref={ref}\n        data-slot=\"table-head\"\n        data-sortable={sortable ? \"true\" : undefined}\n        data-sort-direction={sortDirection || undefined}\n        className={cn(\n          \"h-9 whitespace-nowrap px-2 text-left align-middle font-medium text-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px] bg-component-medium\",\n          {\n            \"cursor-pointer hover:opacity-80 transition-opacity\": sortable,\n            \"sticky top-0 z-20\": sticky,\n          },\n          className,\n        )}\n        role={role}\n        scope={scope}\n        aria-label={ariaLabel}\n        aria-sort={sortable ? (sortDirection === \"asc\" ? \"ascending\" : sortDirection === \"desc\" ? \"descending\" : \"none\") : undefined}\n        tabIndex={sortable ? 0 : undefined}\n        {...props}\n      />\n    );\n  }\n);\n\nTableHead.displayName = \"TableHead\";\n\ninterface TableCellProps extends React.ComponentProps<\"td\"> {\n  /** Whether this cell is interactive */\n  interactive?: boolean;\n  /** ARIA label for the cell */\n  ariaLabel?: string;\n  /** Role for the cell (defaults to cell) */\n  role?: string;\n  /** Whether this cell should be sticky */\n  sticky?: boolean;\n  /** Cell scope for accessibility */\n  scope?: \"col\" | \"row\" | \"colgroup\" | \"rowgroup\";\n  /** Whether to allow text wrapping */\n  wrap?: boolean;\n}\n\nconst TableCell = forwardRef<HTMLTableCellElement, TableCellProps>(\n  ({\n    className,\n    interactive = false,\n    ariaLabel,\n    role = \"cell\",\n    sticky = false,\n    scope,\n    wrap = false,\n    ...props\n  }, ref) => {\n    return (\n      <td\n        ref={ref}\n        data-slot=\"table-cell\"\n        data-interactive={interactive ? \"true\" : undefined}\n        className={cn(\n          \"p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n          {\n            \"whitespace-nowrap\": !wrap,\n            \"whitespace-normal\": wrap,\n            \"cursor-pointer hover:opacity-80 transition-opacity\": interactive,\n            \"sticky top-0 z-10\": sticky,\n          },\n          className,\n        )}\n        role={role}\n        scope={scope}\n        aria-label={ariaLabel}\n        tabIndex={interactive ? 0 : undefined}\n        {...props}\n      />\n    );\n  }\n);\n\nTableCell.displayName = \"TableCell\";\n\ninterface TableCaptionProps extends React.ComponentProps<\"caption\"> {\n  /** ARIA label for the caption */\n  ariaLabel?: string;\n}\n\nconst TableCaption = forwardRef<HTMLTableCaptionElement, TableCaptionProps>(\n  ({ className, ariaLabel, ...props }, ref) => {\n    return (\n      <caption\n        ref={ref}\n        data-slot=\"table-caption\"\n        className={cn(\"mt-4 text-muted-foreground text-sm\", className)}\n        aria-label={ariaLabel}\n        {...props}\n      />\n    );\n  }\n);\n\nTableCaption.displayName = \"TableCaption\";\n\n// Utility types for better TypeScript support\nexport type TableVariant = \"default\" | \"data-table\" | \"compact\";\nexport type SortDirection = \"asc\" | \"desc\" | null;\n\n// Utility hook for table performance optimizations\nexport function useTablePerformance<T>(\n  data: T[],\n  options: {\n    virtualizeThreshold?: number;\n    enableVirtualization?: boolean;\n    pageSize?: number;\n  } = {}\n) {\n  const { virtualizeThreshold = 100, enableVirtualization = true, pageSize = 50 } = options;\n\n  const shouldVirtualize = enableVirtualization && data.length > virtualizeThreshold;\n\n  return {\n    shouldVirtualize,\n    recommendedPageSize: shouldVirtualize ? pageSize : undefined,\n    performanceWarning: data.length > 1000 ? \"Large dataset detected. Consider enabling virtualization or pagination.\" : undefined,\n  };\n}\n\n// Utility hook for table accessibility\nexport function useTableAccessibility(\n  options: {\n    tableId?: string;\n    caption?: string;\n    totalRows?: number;\n    totalColumns?: number;\n  } = {}\n) {\n  const { tableId, caption, totalRows, totalColumns } = options;\n\n  return {\n    tableProps: {\n      role: \"table\",\n      'aria-label': caption || \"Data table\",\n      'aria-rowcount': totalRows,\n      'aria-colcount': totalColumns,\n    },\n    getRowProps: (rowIndex: number, isSelected?: boolean) => ({\n      role: \"row\",\n      'aria-rowindex': rowIndex + 1,\n      'aria-selected': isSelected,\n    }),\n    getCellProps: (rowIndex: number, colIndex: number, isHeader?: boolean) => ({\n      role: isHeader ? \"columnheader\" : \"cell\",\n      'aria-rowindex': rowIndex + 1,\n      'aria-colindex': colIndex + 1,\n    }),\n  };\n}\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n};\n",
      "type": "registry:component"
    }
  ]
}