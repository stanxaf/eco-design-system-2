{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "button",
  "type": "registry:ui",
  "title": "Button",
  "description": "Allows users to take actions with a single click or tap.",
  "registryDependencies": [
    "https://eco-design-system-2.vercel.app/r/themes/theme.json"
  ],
  "files": [
    {
      "path": "src/components/ui/button.tsx",
      "content": "import { Slot } from \"@radix-ui/react-slot\";\nimport { type VariantProps, cva } from \"class-variance-authority\";\nimport type * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\n/**\n * Button component with comprehensive variant system and accessibility features.\n *\n * **IMPORTANT FOR v0: This component uses button-specific CSS variables.\n * DO NOT use generic variables like --primary, --secondary, etc.\n * ONLY use the --button-* variables listed below.**\n *\n * **Available Variants:**\n * - `default`: Primary action button with button-specific primary colors\n * - `destructive`: Dangerous actions with button-specific destructive styling\n * - `secondary`: Alternative primary actions with button-specific secondary colors (has border)\n * - `outline`: Identical to secondary - use for secondary actions with borders\n * - `ghost`: Subtle actions with button-specific hover colors (no border)\n * - `link`: Text-based actions with button-specific link colors (no border)\n *\n * **CSS Variables Used:**\n * - Primary: --button-primary, --button-primary-foreground, --button-primary-hover\n * - Secondary: --button-secondary, --button-secondary-foreground, --button-secondary-hover, --button-secondary-border\n * - Outline: --button-outline, --button-outline-foreground, --button-outline-hover, --button-outline-border\n * - Destructive: --button-destructive, --button-destructive-foreground, --button-destructive-hover\n * - Ghost: --button-ghost-hover, --button-ghost-hover-foreground\n * - Link: --button-link, --button-link-hover\n *\n * **CRITICAL: Secondary and Outline variants are VISUALLY IDENTICAL but use different CSS variables.\n * This is intentional for semantic distinction. DO NOT change this behavior.**\n *\n * **Available Sizes:**\n * - `default`: Standard button size (h-8, px-4, py-2)\n * - `sm`: Small button for compact layouts (h-6, px-[8px], text-[11px], gap-1)\n * - `lg`: Large button for prominent actions (h-10, px-6)\n * - `icon`: Square button for icon-only content (size-8)\n * - `icon-sm`: Small square button for compact icon-only content (size-6)\n *\n * **Features:**\n * - asChild support for polymorphic rendering\n * - Comprehensive accessibility (focus-visible, aria-invalid)\n * - Icon support with automatic sizing and spacing\n * - Small buttons use 12px icons and 11px text for compact layouts\n * - Small icon buttons use 12px icons for compact icon-only interfaces\n * - Responsive design with proper hover states\n * - Dark mode support with theme-aware colors\n * - Disabled state handling with proper opacity\n * - Button-specific color system for consistent theming\n *\n * **v0 Usage Rules:**\n * 1. ALWAYS use the button-specific CSS variables (--button-*)\n * 2. NEVER use generic variables (--primary, --secondary, etc.)\n * 3. Secondary and Outline variants must remain visually identical\n * 4. DO NOT create new variants or modify existing ones\n * 5. Use the exact className patterns shown below\n *\n * **Usage Examples:**\n * ```tsx\n * // Basic button\n * <Button>Click me</Button>\n *\n * // With variant and size\n * <Button variant=\"destructive\" size=\"lg\">\n *   Delete Item\n * </Button>\n *\n * // Icon button\n * <Button size=\"icon\" variant=\"outline\">\n *   <Plus className=\"size-4\" />\n * </Button>\n *\n * // Small button with icon (automatically sized to 12px)\n * <Button size=\"sm\" variant=\"outline\">\n *   <Plus />\n * </Button>\n *\n * // Small icon-only button (size-6 with 12px icon)\n * <Button size=\"icon-sm\" variant=\"outline\">\n *   <Plus className=\"size-3\" />\n * </Button>\n *\n * // With asChild for custom elements\n * <Button asChild>\n *   <Link href=\"/dashboard\">Go to Dashboard</Link>\n * </Button>\n *\n * // All variants\n * <Button variant=\"default\">Default</Button>\n * <Button variant=\"destructive\">Destructive</Button>\n * <Button variant=\"outline\">Outline</Button>\n * <Button variant=\"secondary\">Secondary</Button>\n * <Button variant=\"ghost\">Ghost</Button>\n * <Button variant=\"link\">Link</Button>\n * ```\n */\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-button-primary text-button-primary-foreground hover:bg-button-primary-hover\",\n        destructive:\n          \"bg-button-destructive text-button-destructive-foreground hover:bg-button-destructive-hover focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40\",\n        outline:\n          \"bg-button-outline border border-button-outline-border text-button-outline-foreground hover:bg-button-outline-hover\",\n        secondary:\n          \"bg-button-secondary border border-interactive text-button-secondary-foreground hover:bg-button-secondary-hover\",\n        ghost:\n          \"hover:bg-button-ghost-hover\",\n        link: \"text-button-link underline-offset-4 hover:text-button-link-hover hover:underline\",\n      },\n      size: {\n        default: \"h-8 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-6 rounded-md gap-1 px-[8px] has-[>svg]:px-[8px] [&_svg:not([class*='size-'])]:size-3 text-[11px]\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-8\",\n        \"icon-sm\": \"size-6 [&_svg:not([class*='size-'])]:size-3\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\n/**\n * Props for the Button component.\n *\n * @property asChild - Whether to render as a child component using Radix Slot\n * @property variant - Button variant for styling and semantic meaning\n * @property size - Button size for layout and spacing\n * @property className - Additional CSS classes\n * @property children - Button content (text, icons, etc.)\n * @property disabled - Whether the button is disabled\n */\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean;\n  }) {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  );\n}\n\n/**\n * Main Button component with variant and size support.\n *\n * **Props:**\n * - `variant`: Choose from 6 semantic variants\n * - `size`: Choose from 4 size options\n * - `asChild`: Enable polymorphic rendering with Radix Slot\n * - `className`: Add custom styling\n * - `disabled`: Disable the button\n *\n * **Children:**\n * - Text content for button labels\n * - Icons with automatic sizing (size-4 by default, size-3 for small buttons)\n * - Any valid React children\n *\n * **Accessibility:**\n * - Proper focus-visible states with ring styling\n * - aria-invalid support for form validation\n * - Disabled state with proper opacity and pointer events\n * - Semantic button element with proper ARIA attributes\n *\n * **asChild Feature:**\n * - Renders as any valid HTML element or component\n * - Useful for creating button-styled links, form elements, etc.\n * - Maintains all button styling and behavior\n * - Example: <Button asChild><Link href=\"/path\">Text</Link></Button>\n */\nexport { Button, buttonVariants };\n",
      "type": "registry:component"
    }
  ]
}