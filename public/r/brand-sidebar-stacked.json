{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "brand-sidebar-stacked",
  "type": "registry:component",
  "title": "Brand Sidebar Stacked",
  "description": "A styled, simple, reusable sidebar with stacked icon and text layout",
  "registryDependencies": [
    "badge",
    "button",
    "sidebar",
    "https://eco-design-system-2.vercel.app/r/styles/icons.json",
    "https://eco-design-system-2.vercel.app/r/components/logo.json",
    "https://eco-design-system-2.vercel.app/r/styles/sonner.json",
    "https://eco-design-system-2.vercel.app/r/themes/theme.json"
  ],
  "files": [
    {
      "path": "src/components/brand-sidebar-stacked.tsx",
      "content": "\"use client\";\n\nimport { usePathname } from \"next/navigation\";\nimport * as React from \"react\";\n\nimport { Logo } from \"@/components/logo\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from \"@/components/ui/collapsible\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarHeader,\n  SidebarMenu,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  useSidebar,\n} from \"@/components/ui/sidebar\";\nimport { cn } from \"@/lib/utils\";\n\n/**\n * Navigation item interface for the sidebar\n */\ninterface NavItem {\n  /** Display title of the navigation item */\n  title: string;\n  /** URL path for navigation */\n  href: string;\n  /** React node containing the icon SVG */\n  icon: React.ReactNode;\n  /** Optional badge configuration */\n  badge?: {\n    /** Badge text content */\n    text: string;\n  };\n}\n\n/**\n * Props interface for the BrandSidebarStacked component\n */\ninterface BrandSidebarStackedProps {\n  /** Additional CSS classes to apply to the component */\n  className?: string;\n  /** Optional user profile data */\n  user?: {\n    /** User's full name */\n    name?: string;\n    /** User's email address */\n    email?: string;\n    /** User's avatar initials */\n    initials?: string;\n  };\n  /** Optional notification count */\n  notificationCount?: number;\n  /** Optional callback for navigation items */\n  onNavigate?: (href: string) => void;\n}\n\n/**\n * BrandSidebarStacked - A fixed-width stacked sidebar component\n *\n * Features:\n * - Fixed 72px width with stacked icon and text layout\n * - Responsive design with mobile support\n * - Accessibility features including ARIA labels and keyboard navigation\n * - Theme support (light/dark mode)\n * - User profile integration with popover menu\n * - Notification system with badge indicators\n * - Production-ready with error handling\n *\n * @param props - Component props\n * @returns JSX element representing the stacked sidebar\n */\nexport function BrandSidebarStacked({\n  className,\n  user = {\n    name: \"Full Name\",\n    email: \"user@example.com\",\n    initials: \"ME\",\n  },\n  notificationCount = 3,\n  onNavigate,\n}: BrandSidebarStackedProps) {\n  const pathname = usePathname();\n  const { state } = useSidebar();\n  const isCollapsed = state === \"collapsed\";\n\n  // Error boundary state\n  const [hasError, setHasError] = React.useState(false);\n\n  // Account switching state\n  const [isSwitchAccountOpen, setIsSwitchAccountOpen] = React.useState(false);\n  const [currentAccount, setCurrentAccount] = React.useState({\n    name: \"Sarah Chen\",\n    email: \"sarah.chen@dtn.com\",\n    company: \"DTN\",\n    role: \"Senior Product Manager\",\n    initials: \"SC\",\n  });\n\n  // Profile popover state\n  const [isProfileOpen, setIsProfileOpen] = React.useState(false);\n\n  // Apps dropdown state\n  const [isAppsOpen, setIsAppsOpen] = React.useState(false);\n\n  // DTN Products data\n  const dtnProducts = [\n    {\n      id: \"1\",\n      name: \"Weather Hub\",\n      description: \"Weather forecasting and analytics\",\n      icon: \"cloud-sun\",\n    },\n    {\n      id: \"2\",\n      name: \"Fuel Hub\",\n      description: \"Fuel price tracking and procurement\",\n      icon: \"gas-pump\",\n    },\n    {\n      id: \"3\",\n      name: \"Identity Management\",\n      description: \"User access and permissions\",\n      icon: \"shield-halved\",\n    },\n  ];\n\n  // All accounts data (including current)\n  const allAccounts = [\n    { id: \"1\", company: \"DTN\", isCurrent: true },\n    { id: \"2\", company: \"Acme Co.\", isCurrent: false },\n    { id: \"3\", company: \"Biffco Enterprises Ltd.\", isCurrent: false },\n  ];\n\n  // Handle navigation with error handling\n  const handleNavigation = React.useCallback(\n    (e: React.MouseEvent<HTMLAnchorElement>, href: string) => {\n      try {\n        // In demo context, prevent navigation\n        if (\n          typeof window !== \"undefined\" &&\n          window.location.pathname.includes(\"/demo/\")\n        ) {\n          e.preventDefault();\n          return;\n        }\n\n        // Call custom navigation handler if provided\n        if (onNavigate) {\n          e.preventDefault();\n          onNavigate(href);\n          return;\n        }\n\n        // Default navigation behavior\n      } catch (error) {\n        console.error(\"Navigation error:\", error);\n        setHasError(true);\n      }\n    },\n    [onNavigate],\n  );\n\n  // Handle profile menu actions\n  const handleProfileAction = React.useCallback((action: string) => {\n    try {\n      // Implement profile actions here\n    } catch (error) {\n      console.error(\"Profile action error:\", error);\n      setHasError(true);\n    }\n  }, []);\n\n  // Handle account switching\n  const handleAccountSwitch = React.useCallback(\n    (account: { id: string; company: string; isCurrent: boolean }) => {\n      // Update current account with new company context\n      setCurrentAccount((prev) => ({\n        ...prev,\n        company: account.company,\n        // Role would be updated based on the selected account\n        role:\n          account.company === \"Acme Co.\"\n            ? \"Operations Manager\"\n            : account.company === \"Biffco Enterprises Ltd.\"\n              ? \"Business Analyst\"\n              : \"Senior Product Manager\",\n      }));\n      setIsSwitchAccountOpen(false);\n    },\n    [],\n  );\n\n  // Handle app selection\n  const handleAppSelect = React.useCallback(\n    (app: { id: string; name: string; description: string; icon: string }) => {\n      setIsAppsOpen(false);\n      console.log(`Selected app: ${app.name}`);\n    },\n    [],\n  );\n\n  // Reset error state on component mount\n  React.useEffect(() => {\n    setHasError(false);\n  }, []);\n\n  // Main navigation items configuration\n  const mainNavItems: NavItem[] = React.useMemo(\n    () => [\n      {\n        title: \"Dashboard\",\n        href: \"/dashboard\",\n        icon: (\n          <svg\n            className=\"size-4\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            viewBox=\"0 0 24 24\"\n          >\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d=\"M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z\"\n            />\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d=\"M8 5a2 2 0 012-2h4a2 2 0 012 2v6H8V5z\"\n            />\n          </svg>\n        ),\n      },\n      {\n        title: \"Map\",\n        href: \"/map\",\n        icon: (\n          <svg\n            className=\"size-4\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            viewBox=\"0 0 24 24\"\n          >\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d=\"M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7\"\n            />\n          </svg>\n        ),\n      },\n      {\n        title: \"Assets\",\n        href: \"/assets\",\n        icon: (\n          <svg\n            className=\"size-4\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            viewBox=\"0 0 24 24\"\n          >\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\"\n            />\n          </svg>\n        ),\n      },\n      {\n        title: \"Events\",\n        href: \"/events\",\n        icon: (\n          <svg\n            className=\"size-4\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            viewBox=\"0 0 24 24\"\n          >\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d=\"M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z\"\n            />\n          </svg>\n        ),\n      },\n    ],\n    [],\n  ); // Empty dependency array since nav items are static\n\n  // Error boundary fallback\n  if (hasError) {\n    return (\n      <div className=\"h-full z-50 bg-sidebar border-r border-sidebar-border w-[72px] flex items-center justify-center\">\n        <div className=\"text-sidebar-foreground text-xs text-center p-2\">\n          Error loading sidebar\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={cn(\"h-full z-50\", className)}\n      role=\"navigation\"\n      aria-label=\"Main navigation\"\n    >\n      <Sidebar\n        variant=\"sidebar\"\n        collapsible=\"icon\"\n        width=\"72px\"\n        widthIcon=\"72px\"\n      >\n        <SidebarHeader className=\"sticky top-0 z-10 bg-sidebar border-b border-sidebar-border\">\n          <div className=\"py-2 px-2\" role=\"banner\">\n            <Logo collapsed={isCollapsed} inSidebar={true} />\n          </div>\n        </SidebarHeader>\n\n        <SidebarContent className=\"transition-all duration-200 ease-in-out\">\n          {/* Main Navigation Items */}\n          <SidebarGroup role=\"menubar\" aria-label=\"Main navigation\">\n            <SidebarGroupContent>\n              <SidebarMenu>\n                {mainNavItems.map((item) => {\n                  const isActive =\n                    pathname === item.href ||\n                    (item.href === \"/\" &&\n                      (pathname === \"/\" || pathname === \"\"));\n\n                  return (\n                    <SidebarMenuItem key={item.href} role=\"none\">\n                      <a\n                        href={item.href}\n                        onClick={(e) => handleNavigation(e, item.href)}\n                        className={cn(\n                          \"flex flex-col items-center justify-center gap-1 w-full h-12 rounded-md hover:bg-sidebar-accent hover:text-sidebar-accent-foreground transition-colors cursor-pointer focus:outline-none focus:ring-2 focus:ring-sidebar-ring focus:ring-offset-2 focus:ring-offset-sidebar\",\n                          isActive\n                            ? \"bg-sidebar-accent text-sidebar-accent-foreground font-medium\"\n                            : \"text-sidebar-foreground\",\n                        )}\n                        title={item.title}\n                        role=\"menuitem\"\n                        aria-current={isActive ? \"page\" : undefined}\n                        aria-label={item.title}\n                        tabIndex={0}\n                      >\n                        <span aria-hidden=\"true\">{item.icon}</span>\n                        <span\n                          className=\"text-center text-[8px] truncate w-full\"\n                          aria-hidden=\"true\"\n                        >\n                          {item.title}\n                        </span>\n                      </a>\n                      {item.badge && (\n                        <SidebarMenuBadge\n                          aria-label={`${item.title} has ${item.badge.text} notifications`}\n                        >\n                          {item.badge.text}\n                        </SidebarMenuBadge>\n                      )}\n                    </SidebarMenuItem>\n                  );\n                })}\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n        </SidebarContent>\n\n        {/* Quick Actions Section */}\n        <div\n          className=\"border-t border-sidebar-border\"\n          role=\"toolbar\"\n          aria-label=\"Quick actions\"\n        >\n          <SidebarGroup>\n            <SidebarGroupContent>\n              <SidebarMenu>\n                <SidebarMenuItem role=\"none\">\n                  <SidebarMenuButton\n                    asChild\n                    tooltip={`Notifications (${notificationCount})`}\n                    className=\"w-full h-10 group-data-[collapsible=icon]:w-full! group-data-[collapsible=icon]:h-10!\"\n                  >\n                    <button\n                      className=\"w-full focus:outline-none focus:ring-2 focus:ring-sidebar-ring focus:ring-offset-2 focus:ring-offset-sidebar\"\n                      aria-label={`View notifications (${notificationCount} unread)`}\n                      onClick={() => handleProfileAction(\"notifications\")}\n                    >\n                      <div className=\"flex items-center justify-center w-full h-8\">\n                        <svg\n                          className=\"size-4\"\n                          fill=\"none\"\n                          stroke=\"currentColor\"\n                          viewBox=\"0 0 24 24\"\n                          aria-hidden=\"true\"\n                        >\n                          <path\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            strokeWidth={2}\n                            d=\"M15 17h5l-5 5v-5zM4.828 7l2.586 2.586a2 2 0 002.828 0L12.828 7H4.828zM4.828 17H12l-2.586-2.586a2 2 0 00-2.828 0L4.828 17z\"\n                          />\n                        </svg>\n                      </div>\n                    </button>\n                  </SidebarMenuButton>\n                  <SidebarMenuBadge\n                    aria-label={`${notificationCount} unread notifications`}\n                  >\n                    {notificationCount}\n                  </SidebarMenuBadge>\n                </SidebarMenuItem>\n                <SidebarMenuItem role=\"none\">\n                  <SidebarMenuButton\n                    asChild\n                    tooltip=\"Messages\"\n                    className=\"w-full h-10 group-data-[collapsible=icon]:w-full! group-data-[collapsible=icon]:h-10!\"\n                  >\n                    <button\n                      className=\"w-full focus:outline-none focus:ring-2 focus:ring-sidebar-ring focus:ring-offset-2 focus:ring-offset-sidebar\"\n                      aria-label=\"View messages\"\n                      onClick={() => handleProfileAction(\"messages\")}\n                    >\n                      <div className=\"flex items-center justify-center w-full h-8\">\n                        <svg\n                          className=\"size-4\"\n                          fill=\"none\"\n                          stroke=\"currentColor\"\n                          viewBox=\"0 0 24 24\"\n                          aria-hidden=\"true\"\n                        >\n                          <path\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            strokeWidth={2}\n                            d=\"M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\"\n                          />\n                        </svg>\n                      </div>\n                    </button>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n                <SidebarMenuItem role=\"none\">\n                  <Popover open={isAppsOpen} onOpenChange={setIsAppsOpen}>\n                    <PopoverTrigger asChild>\n                      <SidebarMenuButton\n                        asChild\n                        tooltip=\"Apps\"\n                        className=\"w-full h-10 group-data-[collapsible=icon]:w-full! group-data-[collapsible=icon]:h-10!\"\n                      >\n                        <button\n                          className=\"w-full focus:outline-none focus:ring-2 focus:ring-sidebar-ring focus:ring-offset-2 focus:ring-offset-sidebar\"\n                          aria-label=\"View applications\"\n                        >\n                          <div className=\"flex items-center justify-center w-full h-8\">\n                            <svg\n                              className=\"size-4\"\n                              fill=\"none\"\n                              stroke=\"currentColor\"\n                              viewBox=\"0 0 24 24\"\n                              aria-hidden=\"true\"\n                            >\n                              <path\n                                strokeLinecap=\"round\"\n                                strokeLinejoin=\"round\"\n                                strokeWidth={2}\n                                d=\"M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z\"\n                              />\n                            </svg>\n                          </div>\n                        </button>\n                      </SidebarMenuButton>\n                    </PopoverTrigger>\n                    <PopoverContent\n                      className=\"w-60 p-0\"\n                      align=\"start\"\n                      side=\"right\"\n                      sideOffset={8}\n                    >\n                      {/* Apps Header */}\n                      <div className=\"p-3 border-b border-border\">\n                        <h3 className=\"text-sm font-medium text-foreground\">\n                          Your Products\n                        </h3>\n                        <p className=\"text-xs text-muted-foreground\">\n                          Products you have access to under{\" \"}\n                          {currentAccount.company}\n                        </p>\n                      </div>\n\n                      {/* Apps List */}\n                      <div className=\"p-1\">\n                        {dtnProducts.map((app) => (\n                          <button\n                            key={app.id}\n                            onClick={() => handleAppSelect(app)}\n                            className=\"flex items-center space-x-3 w-full p-2 pl-0 rounded-md hover:bg-accent transition-colors text-left group\"\n                          >\n                            <i\n                              className={`fa-solid fa-${app.icon} text-lg text-muted-foreground group-hover:text-accent-foreground transition-colors`}\n                            ></i>\n                            <span className=\"text-sm font-medium text-foreground group-hover:text-accent-foreground transition-colors\">\n                              {app.name}\n                            </span>\n                          </button>\n                        ))}\n                      </div>\n                    </PopoverContent>\n                  </Popover>\n                </SidebarMenuItem>\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n        </div>\n\n        {/* User Profile Section - Sticky Footer */}\n        <div className=\"sticky z-10 bg-sidebar border-t border-sidebar-border\">\n          <SidebarGroup>\n            <SidebarGroupContent>\n              <div className=\"py-0 px-0\">\n                <div className=\"space-y-3\">\n                  {/* User Profile with Popover Menu */}\n                  <Popover open={isProfileOpen} onOpenChange={setIsProfileOpen}>\n                    <PopoverTrigger asChild>\n                      <button\n                        className=\"flex items-center justify-center w-full h-8 rounded-md hover:bg-sidebar-hover transition-colors focus:outline-none focus:ring-2 focus:ring-sidebar-ring focus:ring-offset-2 focus:ring-offset-sidebar\"\n                        aria-label={`User profile menu for ${user.name}`}\n                        aria-haspopup=\"menu\"\n                      >\n                        <Avatar className=\"size-6\">\n                          <AvatarImage\n                            src=\"https://images.unsplash.com/photo-1494790108755-2616b612b786?w=24&h=24&fit=crop&crop=face\"\n                            alt={currentAccount.name}\n                          />\n                          <AvatarFallback className=\"bg-primary text-primary-foreground\">\n                            <span\n                              className=\"text-xs font-medium\"\n                              aria-hidden=\"true\"\n                            >\n                              {currentAccount.initials}\n                            </span>\n                          </AvatarFallback>\n                        </Avatar>\n                      </button>\n                    </PopoverTrigger>\n                    <PopoverContent\n                      className=\"w-60 p-0\"\n                      align=\"start\"\n                      side=\"right\"\n                      sideOffset={8}\n                      role=\"menu\"\n                      aria-label=\"User profile menu\"\n                    >\n                      {/* Profile Header */}\n                      <div className=\"flex flex-col space-y-2 p-3 border-b border-border\">\n                        <Avatar className=\"size-12\">\n                          <AvatarImage\n                            src=\"https://images.unsplash.com/photo-1494790108755-2616b612b786?w=48&h=48&fit=crop&crop=face\"\n                            alt={currentAccount.name}\n                          />\n                          <AvatarFallback className=\"bg-primary text-primary-foreground\">\n                            <span\n                              className=\"text-sm font-medium\"\n                              aria-hidden=\"true\"\n                            >\n                              {currentAccount.initials}\n                            </span>\n                          </AvatarFallback>\n                        </Avatar>\n                        <div>\n                          <p className=\"text-sm font-medium text-foreground\">\n                            {currentAccount.name}\n                          </p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            {currentAccount.email}\n                          </p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            {currentAccount.company} • {currentAccount.role}\n                          </p>\n                        </div>\n                      </div>\n\n                      {/* Profile Menu Items */}\n                      <div className=\"p-1\" role=\"menu\">\n                        {/* Switch Account - Collapsible */}\n                        <Collapsible\n                          open={isSwitchAccountOpen}\n                          onOpenChange={setIsSwitchAccountOpen}\n                        >\n                          <CollapsibleTrigger asChild>\n                            <button\n                              className=\"flex items-center space-x-2 w-full p-2 rounded-md hover:bg-accent transition-colors text-left group focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\"\n                              role=\"menuitem\"\n                            >\n                              <svg\n                                className=\"size-4 text-muted-foreground group-hover:text-accent-foreground transition-colors\"\n                                fill=\"none\"\n                                stroke=\"currentColor\"\n                                viewBox=\"0 0 24 24\"\n                                aria-hidden=\"true\"\n                              >\n                                <path\n                                  strokeLinecap=\"round\"\n                                  strokeLinejoin=\"round\"\n                                  strokeWidth={2}\n                                  d=\"M8 7a4 4 0 1 1 8 0 4 4 0 0 1-8 0zM2 21v-2a4 4 0 0 1 4-4h4a4 4 0 0 1 4 4v2\"\n                                />\n                                <path\n                                  strokeLinecap=\"round\"\n                                  strokeLinejoin=\"round\"\n                                  strokeWidth={2}\n                                  d=\"M16 7a4 4 0 1 1 8 0 4 4 0 0 1-8 0zM2 21v-2a4 4 0 0 1 4-4h4a4 4 0 0 1 4 4v2\"\n                                />\n                              </svg>\n                              <span className=\"text-sm text-foreground group-hover:text-accent-foreground transition-colors\">\n                                Switch Account\n                              </span>\n                              <svg\n                                className={cn(\n                                  \"size-4 text-muted-foreground group-hover:text-accent-foreground transition-colors ml-auto\",\n                                  isSwitchAccountOpen && \"rotate-180\",\n                                )}\n                                fill=\"none\"\n                                stroke=\"currentColor\"\n                                viewBox=\"0 0 24 24\"\n                                aria-hidden=\"true\"\n                              >\n                                <path\n                                  strokeLinecap=\"round\"\n                                  strokeLinejoin=\"round\"\n                                  strokeWidth={2}\n                                  d=\"M19 9l-7 7-7-7\"\n                                />\n                              </svg>\n                            </button>\n                          </CollapsibleTrigger>\n                          <CollapsibleContent className=\"space-y-1 m-0.5\">\n                            {allAccounts.map((account) => (\n                              <button\n                                key={account.id}\n                                onClick={() => handleAccountSwitch(account)}\n                                className={cn(\n                                  \"flex items-center space-x-2 w-full p-2 rounded-md transition-colors text-left group m-0 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n                                  account.isCurrent\n                                    ? \"bg-primary text-primary-foreground\"\n                                    : \"hover:bg-accent hover:text-accent-foreground\",\n                                )}\n                                role=\"menuitem\"\n                              >\n                                <div className=\"flex-1 min-w-0\">\n                                  <p className=\"text-sm transition-colors\">\n                                    {account.company}\n                                  </p>\n                                </div>\n                              </button>\n                            ))}\n                          </CollapsibleContent>\n                        </Collapsible>\n\n                        {/* Other Menu Items */}\n                        <button\n                          className=\"flex items-center space-x-2 w-full p-2 rounded-md hover:bg-accent transition-colors text-left group focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\"\n                          role=\"menuitem\"\n                          onClick={() => handleProfileAction(\"settings\")}\n                        >\n                          <svg\n                            className=\"size-4 text-muted-foreground group-hover:text-accent-foreground transition-colors\"\n                            fill=\"none\"\n                            stroke=\"currentColor\"\n                            viewBox=\"0 0 24 24\"\n                            aria-hidden=\"true\"\n                          >\n                            <path\n                              strokeLinecap=\"round\"\n                              strokeLinejoin=\"round\"\n                              strokeWidth={2}\n                              d=\"M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z\"\n                            />\n                            <path\n                              strokeLinecap=\"round\"\n                              strokeLinejoin=\"round\"\n                              strokeWidth={2}\n                              d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\"\n                            />\n                          </svg>\n                          <span className=\"text-sm text-foreground group-hover:text-accent-foreground transition-colors\">\n                            Settings\n                          </span>\n                        </button>\n                        <div\n                          className=\"border-t border-border my-1\"\n                          role=\"separator\"\n                        />\n                        <button\n                          className=\"flex items-center space-x-2 w-full p-2 rounded-md hover:bg-accent transition-colors text-left group focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\"\n                          role=\"menuitem\"\n                          onClick={() => handleProfileAction(\"logout\")}\n                        >\n                          <svg\n                            className=\"size-4 text-destructive group-hover:text-accent-foreground transition-colors\"\n                            fill=\"none\"\n                            stroke=\"currentColor\"\n                            viewBox=\"0 0 24 24\"\n                            aria-hidden=\"true\"\n                          >\n                            <path\n                              strokeLinecap=\"round\"\n                              strokeLinejoin=\"round\"\n                              strokeWidth={2}\n                              d=\"M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1\"\n                            />\n                          </svg>\n                          <span className=\"text-sm text-destructive group-hover:text-accent-foreground transition-colors\">\n                            Log out\n                          </span>\n                        </button>\n                      </div>\n                    </PopoverContent>\n                  </Popover>\n                </div>\n              </div>\n            </SidebarGroupContent>\n          </SidebarGroup>\n        </div>\n      </Sidebar>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/layouts/shell-layout.tsx",
      "content": "import { Geist_Mono, Inter, Montserrat } from \"next/font/google\";\nimport React, { type ReactNode } from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nimport \"@/app/globals.css\";\n\nconst InterSans = Inter({\n  subsets: [\"latin\"],\n  variable: \"--font-sans\",\n});\n\nconst GeistMono = Geist_Mono({\n  subsets: [\"latin\"],\n  variable: \"--font-mono\",\n});\n\nconst MontserratSerif = Montserrat({\n  subsets: [\"latin\"],\n  variable: \"--font-serif\",\n});\n\nexport default function ShellLayout({\n  children,\n}: Readonly<{\n  children: ReactNode;\n}>) {\n  return (\n    <html\n      lang=\"en\"\n      className={cn(\n        InterSans.variable,\n        GeistMono.variable,\n        MontserratSerif.variable,\n        \"bg-background text-foreground\",\n      )}\n    >\n      <body>\n        <main className=\"flex w-full\">\n          <div className=\"w-full\">{children}</div>\n        </main>\n      </body>\n    </html>\n  );\n}\n",
      "type": "registry:file",
      "target": "app/layout.tsx"
    },
    {
      "path": "src/app/demo/[name]/blocks/blank-page.tsx",
      "content": "export default function BlankPage() {\n  return (\n    <div className=\"flex flex-col items-center justify-center gap-4 rounded-md py-96\">\n      <div className=\"text-muted-foreground\">\n        Start prompting to use your component!\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/page.tsx"
    }
  ]
}