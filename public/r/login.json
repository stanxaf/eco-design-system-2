{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "login",
  "type": "registry:component",
  "title": "Login",
  "description": "Username & password login section with customer quote.",
  "registryDependencies": [
    "badge",
    "button",
    "https://eco-design-system-2.vercel.app/r/themes/theme.json",
    "logo"
  ],
  "files": [
    {
      "path": "src/components/login.tsx",
      "content": "\"use client\";\n\nimport { Logo } from \"@/components/logo\";\n\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport Link from \"next/link\";\nimport * as React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport * as z from \"zod\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Separator } from \"@/components/ui/separator\";\n\nconst formSchema = z.object({\n  email: z.string().email({\n    message: \"Please enter a valid email address.\",\n  }),\n  password: z.string().min(8, {\n    message: \"Password must be at least 8 characters.\",\n  }),\n});\n\nfunction LoginForm() {\n  const [isLoading, setIsLoading] = React.useState<boolean>(false);\n\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  async function onSubmit(values: z.infer<typeof formSchema>) {\n    setIsLoading(true);\n  };\n\n  return (\n    <div className=\"grid gap-6\">\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n          <FormField\n            control={form.control}\n            name=\"email\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Email</FormLabel>\n                <FormControl>\n                  <Input\n                    placeholder=\"name@example.com\"\n                    value={field.value}\n                    onChange={field.onChange}\n                    onBlur={field.onBlur}\n                    name={field.name}\n                    ref={field.ref}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          <FormField\n            control={form.control}\n            name=\"password\"\n            render={({ field }) => (\n              <FormItem>\n                <div className=\"flex items-center justify-between\">\n                  <FormLabel>Password</FormLabel>\n                  <Link\n                    href=\"#forgot-password\"\n                    className=\"text-muted-foreground text-xs hover:text-primary\"\n                  >\n                    Forgot password?\n                  </Link>\n                </div>\n                <FormControl>\n                  <Input\n                    type=\"password\"\n                    value={field.value}\n                    onChange={field.onChange}\n                    onBlur={field.onBlur}\n                    name={field.name}\n                    ref={field.ref}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n            {isLoading ? \"Signing in...\" : \"Sign in\"}\n          </Button>\n        </form>\n      </Form>\n\n      <div className=\"relative\">\n        <div className=\"absolute inset-0 flex items-center\">\n          <Separator className=\"w-full\" />\n        </div>\n        <div className=\"relative flex justify-center text-xs uppercase\">\n          <span className=\"bg-background px-2 text-muted-foreground\">\n            Or continue with\n          </span>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-2 gap-4\">\n        <Button variant=\"outline\" type=\"button\" disabled={isLoading}>\n          Google\n        </Button>\n        <Button variant=\"outline\" type=\"button\" disabled={isLoading}>\n          Microsoft\n        </Button>\n      </div>\n\n      <div className=\"text-center text-sm\">\n        Don&apos;t have an account?{\" \"}\n        <Link href=\"/signup\" className=\"text-primary hover:underline\">\n          Sign up\n        </Link>\n      </div>\n    </div>\n  );\n}\n\nexport function Login() {\n  return (\n    <div className=\"container relative flex-col items-center justify-center md:grid lg:max-w-none lg:grid-cols-2 lg:px-0\">\n      <div className=\"relative hidden h-full flex-col bg-foreground/10 p-10 text-foreground lg:flex dark:border-r\">\n        <div className=\"relative z-20 flex items-center font-medium text-lg\">\n          <Logo />\n        </div>\n\n        <div className=\"relative z-20 mt-auto\">\n          <blockquote className=\"space-y-2\">\n            <p className=\"text-lg\">\n              &ldquo;Tbh @shadcn really cooked with @shadcn. Keeps passing the\n              test of time.&rdquo;\n            </p>\n            <footer className=\"text-sm\">Guillermo Rauch, CEO of Vercel</footer>\n          </blockquote>\n        </div>\n      </div>\n\n      <div className=\"lg:p-8\">\n        <div className=\"mx-auto flex w-full flex-col justify-center space-y-6 sm:w-[350px]\">\n          <div className=\"flex flex-col space-y-2 text-center\">\n            <h1 className=\"font-semibold text-2xl tracking-tight\">\n              Welcome back\n            </h1>\n            <p className=\"text-muted-foreground text-sm\">\n              Enter your email to sign in to your account\n            </p>\n          </div>\n\n          <LoginForm />\n\n          <p className=\"px-8 text-center text-muted-foreground text-sm\">\n            By clicking continue, you agree to our{\" \"}\n            <Link\n              href=\"#terms\"\n              className=\"underline underline-offset-4 hover:text-primary\"\n            >\n              Terms of Service\n            </Link>{\" \"}\n            and{\" \"}\n            <Link\n              href=\"#privacy\"\n              className=\"underline underline-offset-4 hover:text-primary\"\n            >\n              Privacy Policy\n            </Link>\n            .\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/layouts/minimal-layout.tsx",
      "content": "import { Inter, Geist_Mono, Montserrat } from \"next/font/google\";\nimport React, { type ReactNode } from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nimport \"@/app/globals.css\";\n\nconst InterSans = Inter({\n  subsets: [\"latin\"],\n  variable: \"--font-sans\",\n});\n\nconst GeistMono = Geist_Mono({\n  subsets: [\"latin\"],\n  variable: \"--font-mono\",\n});\n\nconst MontserratSerif = Montserrat({\n  subsets: [\"latin\"],\n  variable: \"--font-serif\",\n});\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: ReactNode;\n}>) {\n  return (\n    <html\n      lang=\"en\"\n      className={cn(\n        InterSans.variable,\n        GeistMono.variable,\n        MontserratSerif.variable,\n        \"bg-background text-foreground\",\n      )}\n    >\n      <body>\n        <main className=\"flex w-full\">\n          <div className=\"w-full\">{children}</div>\n        </main>\n      </body>\n    </html>\n  );\n}\n",
      "type": "registry:file",
      "target": "app/layout.tsx"
    },
    {
      "path": "src/app/demo/[name]/blocks/blank-page.tsx",
      "content": "export default function BlankPage() {\n  return (\n    <div className=\"flex flex-col items-center justify-center gap-4 rounded-md py-96\">\n      <div className=\"text-muted-foreground\">\n        Start prompting to use your component!\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/page.tsx"
    }
  ]
}