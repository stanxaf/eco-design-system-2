{
  "name": "data-table",
  "type": "registry:ui",
  "title": "Data Table",
  "description": "Powerful table and datagrids built using TanStack Table with sorting, filtering, pagination, and row selection.",
  "registryDependencies": [
    "https://eco-design-system-2.vercel.app/r/styles/button.json",
    "https://eco-design-system-2.vercel.app/r/styles/checkbox.json",
    "https://eco-design-system-2.vercel.app/r/styles/dropdown-menu.json",
    "https://eco-design-system-2.vercel.app/r/styles/input.json",
    "https://eco-design-system-2.vercel.app/r/styles/table.json",
    "https://eco-design-system-2.vercel.app/r/themes/theme.json"
  ],
  "dependencies": [
    "@tanstack/react-table"
  ],
  "files": [
    {
      "path": "src/components/ui/data-table.tsx",
      "type": "registry:component",
      "content": "\"use client\";\n\nimport {\n  type ColumnDef,\n  type ColumnFiltersState,\n  type SortingState,\n  type VisibilityState,\n  flexRender,\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\";\nimport { ArrowUpDown, ArrowUp, ArrowDown, ChevronDown, MoreHorizontal, Download, Trash2 } from \"lucide-react\";\nimport * as React from \"react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { DataTablePagination } from \"@/components/ui/data-table-pagination\";\nimport { DataTableToolbar } from \"@/components/ui/data-table-toolbar\";\nimport { Input } from \"@/components/ui/input\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n  useTablePerformance,\n  useTableAccessibility,\n} from \"@/components/ui/table\";\nimport { cn } from \"@/lib/utils\";\n\n/**\n * Data Table component with sorting, filtering, pagination, and row selection.\n *\n * **IMPORTANT FOR v0: This component uses data-table-specific CSS variables.\n * DO NOT use generic variables like --primary, --secondary, etc.\n * ONLY use the --data-table-* variables listed below.**\n *\n * **Available Components:**\n * - `DataTable`: Main data table with full functionality\n * - `DataTableToolbar`: Integrated toolbar with global search (when globalSearch=true)\n * - `createSortableHeader`: Utility for sortable column headers\n * - `createRowSelectionColumn`: Utility for row selection column\n * - `createActionsColumn`: Utility for actions dropdown column\n *\n * **CSS Variables Used:**\n * - Background: --data-table-background, --data-table-foreground\n * - Border: --data-table-border, --data-table-border-hover\n * - Header: --data-table-header-background, --data-table-header-foreground\n * - Row: --data-table-row-hover, --data-table-row-selected\n * - Pagination: --data-table-pagination-background, --data-table-pagination-foreground\n *\n * **Features:**\n * - Sorting with visual indicators\n * - Global filtering with integrated DataTableToolbar (when globalSearch=true)\n * - Pagination with customizable page sizes\n * - Row selection with checkboxes\n * - Column visibility controls\n * - Bulk actions for selected rows\n * - Responsive design with mobile-friendly layout\n * - Accessibility compliant with proper ARIA attributes\n * - Dark mode support with theme-aware colors\n * - Customizable toolbar and actions\n *\n * **v0 Usage Rules:**\n * 1. ALWAYS use the data-table-specific CSS variables (--data-table-*)\n * 2. NEVER use generic variables (--primary, --secondary, etc.)\n * 3. Use proper TypeScript interfaces for type safety\n * 4. Include proper accessibility attributes\n * 5. Handle loading and empty states appropriately\n * 6. Use consistent naming conventions\n * 7. Provide clear column definitions with proper types\n */\n\ninterface DataTableProps<TData, TValue> {\n  columns: ColumnDef<TData, TValue>[];\n  data: TData[];\n  globalSearch?: boolean;\n  showColumnVisibility?: boolean;\n  showRowSelection?: boolean;\n  showBulkActions?: boolean;\n  bulkActions?: {\n    onExport?: (selectedRows: TData[]) => void;\n    onDelete?: (selectedRows: TData[]) => void;\n  };\n  className?: string;\n  paginationVariant?: \"advanced\" | \"basic\";\n  itemsPerPageOptions?: number[];\n  columnWidths?: Record<string, string>; // Custom column widths\n  /** Whether the table is in a loading state */\n  isLoading?: boolean;\n  /** Custom loading component */\n  loadingComponent?: React.ReactNode;\n  /** Whether to enable sticky headers */\n  stickyHeaders?: boolean;\n  /** Table variant for different use cases */\n  tableVariant?: \"default\" | \"data-table\" | \"compact\";\n  /** ARIA label for the table */\n  ariaLabel?: string;\n}\n\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n  globalSearch = false,\n  showColumnVisibility = true,\n  showRowSelection = true,\n  showBulkActions = false,\n  bulkActions,\n  className,\n  paginationVariant = \"advanced\",\n  itemsPerPageOptions = [10, 25, 50, 100],\n  columnWidths = { select: \"w-8\", actions: \"w-12\" }, // Default widths\n  isLoading = false,\n  loadingComponent,\n  stickyHeaders = false,\n  tableVariant = \"data-table\",\n  ariaLabel = \"Data table with sorting, filtering, and pagination\",\n}: DataTableProps<TData, TValue>) {\n  const [sorting, setSorting] = React.useState<SortingState>([]);\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([]);\n  const [columnVisibility, setColumnVisibility] = React.useState<VisibilityState>({});\n  const [rowSelection, setRowSelection] = React.useState({});\n  const [globalFilter, setGlobalFilter] = React.useState(\"\");\n  const [pageSize, setPageSize] = React.useState(10);\n  const [pageIndex, setPageIndex] = React.useState(0);\n\n  // Performance optimization hook\n  const { shouldVirtualize, performanceWarning } = useTablePerformance(data, {\n    virtualizeThreshold: 100,\n    enableVirtualization: true,\n    pageSize: 25,\n  });\n\n  // Accessibility hook\n  const { tableProps } = useTableAccessibility({\n    caption: ariaLabel,\n    totalRows: data.length,\n    totalColumns: columns.length,\n  });\n\n  // Memoize column width getter to avoid recreating functions in render\n  const getColumnWidth = React.useCallback((columnId: string) => {\n    return columnWidths[columnId] || \"\";\n  }, [columnWidths]);\n\n  const table = useReactTable({\n    data,\n    columns,\n    onSortingChange: setSorting,\n    onColumnFiltersChange: setColumnFilters,\n    onGlobalFilterChange: setGlobalFilter,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    onColumnVisibilityChange: setColumnVisibility,\n    onRowSelectionChange: setRowSelection,\n    onPaginationChange: (updater) => {\n      if (typeof updater === 'function') {\n        const newPagination = updater({ pageIndex, pageSize });\n        setPageIndex(newPagination.pageIndex);\n        setPageSize(newPagination.pageSize);\n      }\n    },\n    state: {\n      sorting,\n      columnFilters,\n      columnVisibility,\n      rowSelection,\n      globalFilter,\n      pagination: {\n        pageIndex,\n        pageSize,\n      },\n    },\n  });\n\n  const handlePageChange = (page: number) => {\n    setPageIndex(page - 1);\n  };\n\n  const handleItemsPerPageChange = (newPageSize: number) => {\n    setPageSize(newPageSize);\n    setPageIndex(0); // Reset to first page when changing page size\n  };\n\n  // Bulk action handlers\n  const handleBulkExport = () => {\n    const selectedRows = table.getFilteredSelectedRowModel().rows.map(row => row.original);\n    bulkActions?.onExport?.(selectedRows);\n  };\n\n  const handleBulkDelete = () => {\n    const selectedRows = table.getFilteredSelectedRowModel().rows.map(row => row.original);\n    bulkActions?.onDelete?.(selectedRows);\n  };\n\n  // Get selected row count\n  const selectedRowCount = table.getFilteredSelectedRowModel().rows.length;\n\n  return (\n    <div className={cn(\"w-full space-y-2\", className)} data-slot=\"data-table\">\n      {/* Performance Warning */}\n      {performanceWarning && (\n        <div className=\"p-3 bg-yellow-50 border border-yellow-200 rounded-md text-sm text-yellow-800\">\n          ⚠️ {performanceWarning}\n        </div>\n      )}\n\n      {/* Toolbar */}\n      <div className=\"flex items-center justify-between\" data-slot=\"data-table-toolbar\">\n        {globalSearch ? (\n          <DataTableToolbar\n            table={table}\n            globalFilter={globalFilter}\n            setGlobalFilter={setGlobalFilter}\n            className=\"flex-1 min-w-0\"\n          />\n        ) : (\n          <div className=\"flex flex-1 items-center space-x-2\">\n            {/* No search when globalSearch is disabled */}\n          </div>\n        )}\n        <div className=\"flex items-center space-x-2 h-8 flex-shrink-0 ml-2\">\n          {/* Bulk Actions */}\n          {showBulkActions && selectedRowCount > 0 && (\n            <>\n              <div className=\"flex items-center space-x-1 flex-shrink-0\">\n                {bulkActions?.onExport && (\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={handleBulkExport}\n                    className=\"h-8 min-w-0 flex-shrink-0\"\n                    data-slot=\"data-table-bulk-export\"\n                    aria-label=\"Export selected rows\"\n                  >\n                    <Download />\n                    <span className=\"hidden sm:inline\">Export ({selectedRowCount})</span>\n                    <span className=\"sm:hidden\">Export</span>\n                  </Button>\n                )}\n                {bulkActions?.onDelete && (\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={handleBulkDelete}\n                    className=\"h-8 min-w-0 flex-shrink-0\"\n                    data-slot=\"data-table-bulk-delete\"\n                    aria-label=\"Delete selected rows\"\n                  >\n                    <Trash2 />\n                    <span className=\"hidden sm:inline\">Delete ({selectedRowCount})</span>\n                    <span className=\"sm:hidden\">Delete</span>\n                  </Button>\n                )}\n              </div>\n            </>\n          )}\n\n          {/* Column Visibility */}\n          {showColumnVisibility && (\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"h-8\"\n                  data-slot=\"data-table-column-toggle\"\n                  aria-label=\"Toggle column visibility\"\n                >\n                  View\n                  <ChevronDown />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\" className=\"w-[150px]\" data-slot=\"data-table-column-menu\">\n                <DropdownMenuLabel>Toggle columns</DropdownMenuLabel>\n                <DropdownMenuSeparator />\n                {table\n                  .getAllColumns()\n                  .filter(\n                    (column) =>\n                      typeof column.accessorFn !== \"undefined\" && column.getCanHide()\n                  )\n                  .map((column) => {\n                    return (\n                      <DropdownMenuCheckboxItem\n                        key={column.id}\n                        className=\"capitalize\"\n                        checked={column.getIsVisible()}\n                        onCheckedChange={(value) =>\n                          column.toggleVisibility(!!value)\n                        }\n                      >\n                        {column.id}\n                      </DropdownMenuCheckboxItem>\n                    );\n                  })}\n              </DropdownMenuContent>\n            </DropdownMenu>\n          )}\n        </div>\n      </div>\n\n      {/* Table */}\n      <div data-slot=\"data-table-container\">\n        <Table\n          data-slot=\"data-table-main\"\n          isLoading={isLoading}\n          loadingComponent={loadingComponent}\n          isEmpty={!isLoading && table.getRowModel().rows?.length === 0}\n          variant={tableVariant}\n          ariaLabel={ariaLabel}\n          stickyHeaders={stickyHeaders}\n          enableHorizontalScroll={true}\n          {...tableProps}\n        >\n          <TableHeader data-slot=\"data-table-header\" sticky={stickyHeaders}>\n            {table.getHeaderGroups().map((headerGroup) => (\n              <TableRow key={headerGroup.id} data-slot=\"data-table-header-row\">\n                {headerGroup.headers.map((header) => {\n                  const isSortable = header.column.getCanSort();\n                  return (\n                    <TableHead\n                      key={header.id}\n                      data-slot=\"data-table-header-cell\"\n                      className={cn(\n                        getColumnWidth(header.id)\n                      )}\n                      sortable={isSortable}\n                      sortDirection={isSortable ? (header.column.getIsSorted() || null) : null}\n                      sticky={stickyHeaders}\n                      onClick={isSortable ? () => header.column.toggleSorting(header.column.getIsSorted() === \"asc\") : undefined}\n                    >\n                      {header.isPlaceholder\n                        ? null\n                        : flexRender(\n                            header.column.columnDef.header,\n                            header.getContext()\n                          )}\n                    </TableHead>\n                  );\n                })}\n              </TableRow>\n            ))}\n          </TableHeader>\n          <TableBody data-slot=\"data-table-body\">\n            {table.getRowModel().rows.map((row) => (\n              <TableRow\n                key={row.id}\n                data-state={row.getIsSelected() ? \"selected\" : undefined}\n                data-slot=\"data-table-row\"\n                selectable={showRowSelection}\n                selected={row.getIsSelected()}\n                interactive={true}\n              >\n                {row.getVisibleCells().map((cell) => {\n                  return (\n                    <TableCell\n                      key={cell.id}\n                      data-slot=\"data-table-cell\"\n                      className={getColumnWidth(cell.column.id)}\n                    >\n                      {flexRender(\n                        cell.column.columnDef.cell,\n                        cell.getContext()\n                      )}\n                    </TableCell>\n                  );\n                })}\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </div>\n\n      {/* Pagination */}\n      <div data-slot=\"data-table-pagination\">\n        <DataTablePagination\n          variant={paginationVariant}\n          currentPage={pageIndex + 1}\n          totalPages={table.getPageCount()}\n          totalItems={table.getFilteredRowModel().rows.length}\n          itemsPerPage={pageSize}\n          onPageChange={handlePageChange}\n          onItemsPerPageChange={handleItemsPerPageChange}\n          itemsPerPageOptions={itemsPerPageOptions}\n          className=\"w-full\"\n        />\n      </div>\n    </div>\n  );\n}\n\n// Utility function to create sortable column header\nexport function createSortableHeader<TData, TValue>(\n  column: any,\n  title: string\n) {\n  const sortState = column.getIsSorted();\n\n  const getSortIcon = () => {\n    if (sortState === \"asc\") {\n      return <ArrowUp className=\"h-4 w-4\" />;\n    } else if (sortState === \"desc\") {\n      return <ArrowDown className=\"h-4 w-4\" />;\n    }\n    return null; // No icon when not sorted\n  };\n\n  return (\n    <div className=\"flex items-center gap-2 cursor-pointer hover:opacity-80 transition-opacity\">\n      <span>{title}</span>\n      {getSortIcon()}\n    </div>\n  );\n}\n\n// Utility function to create row selection column\nexport function createRowSelectionColumn<TData>(): ColumnDef<TData> {\n  return {\n    id: \"select\",\n    size: 32,\n    minSize: 32,\n    maxSize: 32,\n    header: ({ table }) => (\n      <div className=\"flex justify-center\">\n        <Checkbox\n          checked={\n            table.getIsAllPageRowsSelected() ||\n            (table.getIsSomePageRowsSelected() && \"indeterminate\")\n          }\n          onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n          aria-label=\"Select all\"\n        />\n      </div>\n    ),\n    cell: ({ row }) => (\n      <div className=\"flex justify-center\">\n        <Checkbox\n          checked={row.getIsSelected()}\n          onCheckedChange={(value) => row.toggleSelected(!!value)}\n          aria-label=\"Select row\"\n        />\n      </div>\n    ),\n    enableSorting: false,\n    enableHiding: false,\n  };\n}\n\n// Utility function to create actions column\nexport function createActionsColumn<TData>(\n  actions: (row: any) => React.ReactNode\n): ColumnDef<TData> {\n  return {\n    id: \"actions\",\n    size: 50, // Fixed width for actions column\n    enableHiding: false,\n    cell: ({ row }) => {\n      return (\n        <div className=\"flex justify-end\">\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" size=\"icon-sm\">\n                <span className=\"sr-only\">Open menu</span>\n                <MoreHorizontal />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\">\n              {actions(row)}\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      );\n    },\n  };\n}\n"
    }
  ]
}