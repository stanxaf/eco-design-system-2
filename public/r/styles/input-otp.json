{
  "name": "input-otp",
  "type": "registry:ui",
  "title": "Input OTP",
  "description": "A one-time password input component.",
  "registryDependencies": [
    "https://eco-design-system-2.vercel.app/r/themes/theme.json"
  ],
  "files": [
    {
      "path": "src/components/ui/input-otp.tsx",
      "type": "registry:component",
      "content": "\"use client\";\n\nimport { OTPInput, OTPInputContext } from \"input-otp\";\nimport { MinusIcon } from \"lucide-react\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\n/**\n * InputOTP component for entering one-time passwords and verification codes.\n *\n * This component provides a clean interface for entering verification codes with\n * customizable slots and separators. It's commonly used for 2FA, email/SMS verification,\n * and other security-sensitive operations.\n *\n * @example\n * ```tsx\n * // Basic 6-digit OTP\n * <InputOTP maxLength={6} value={value} onChange={setValue}>\n *   <InputOTPGroup>\n *     <InputOTPSlot index={0} />\n *     <InputOTPSlot index={1} />\n *     <InputOTPSlot index={2} />\n *     <InputOTPSlot index={3} />\n *     <InputOTPSlot index={4} />\n *     <InputOTPSlot index={5} />\n *   </InputOTPGroup>\n * </InputOTP>\n *\n * // With separator\n * <InputOTP maxLength={6} value={value} onChange={setValue}>\n *   <InputOTPGroup>\n *     <InputOTPSlot index={0} />\n *     <InputOTPSlot index={1} />\n *     <InputOTPSlot index={2} />\n *   </InputOTPGroup>\n *   <InputOTPSeparator />\n *   <InputOTPGroup>\n *     <InputOTPSlot index={3} />\n *     <InputOTPSlot index={4} />\n *     <InputOTPSlot index={5} />\n *   </InputOTPGroup>\n * </InputOTP>\n * ```\n */\nfunction InputOTP({\n  className,\n  containerClassName,\n  ...props\n}: React.ComponentProps<typeof OTPInput> & {\n  containerClassName?: string;\n}) {\n  return (\n    <OTPInput\n      data-slot=\"input-otp\"\n      containerClassName={cn(\n        \"flex items-center gap-2 has-disabled:opacity-50\",\n        containerClassName,\n      )}\n      className={cn(\"disabled:cursor-not-allowed\", className)}\n      {...props}\n    />\n  );\n}\n\n/**\n * InputOTPGroup component that groups related OTP input slots together.\n *\n * This component is used to visually group OTP input slots. It's particularly useful\n * when combined with separators to create logical groupings of digits (e.g., 3-3 or 4-4).\n *\n * @example\n * ```tsx\n * <InputOTPGroup>\n *   <InputOTPSlot index={0} />\n *   <InputOTPSlot index={1} />\n *   <InputOTPSlot index={2} />\n * </InputOTPGroup>\n * <InputOTPSeparator />\n * <InputOTPGroup>\n *   <InputOTPSlot index={3} />\n *   <InputOTPSlot index={4} />\n *   <InputOTPSlot index={5} />\n * </InputOTPGroup>\n * ```\n */\nfunction InputOTPGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"input-otp-group\"\n      className={cn(\"flex items-center\", className)}\n      {...props}\n    />\n  );\n}\n\n/**\n * InputOTPSlot component that represents an individual digit input slot.\n *\n * Each slot represents one character position in the OTP input. The component automatically\n * handles focus management, character display, and visual states (active, filled, error).\n *\n * @param index - The zero-based index of this slot in the OTP sequence\n * @param className - Additional CSS classes to apply to the slot\n * @param props - Additional div props\n *\n * @example\n * ```tsx\n * <InputOTPSlot index={0} />\n * <InputOTPSlot index={1} />\n * <InputOTPSlot index={2} />\n * ```\n */\nfunction InputOTPSlot({\n  index,\n  className,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  index: number;\n}) {\n  const inputOTPContext = React.useContext(OTPInputContext);\n  const { char, hasFakeCaret, isActive } = inputOTPContext?.slots[index] ?? {};\n\n  return (\n    <div\n      data-slot=\"input-otp-slot\"\n      data-active={isActive}\n      className={cn(\n        \"relative flex h-8 w-8 items-center justify-center border-input border-y border-r text-sm outline-none transition-all first:rounded-l-md first:border-l last:rounded-r-md aria-invalid:border-destructive data-[active=true]:z-10 data-[active=true]:border-ring data-[active=true]:ring-[3px] data-[active=true]:ring-ring/50 data-[active=true]:aria-invalid:border-destructive data-[active=true]:aria-invalid:ring-destructive/20 dark:bg-input/30 dark:data-[active=true]:aria-invalid:ring-destructive/40\",\n        className,\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  );\n}\n\n/**\n * InputOTPSeparator component that provides visual separation between OTP input groups.\n *\n * This component renders a minus icon to visually separate groups of OTP input slots.\n * It's commonly used to break up longer codes into more readable chunks (e.g., 123-456-789).\n *\n * @param props - Additional div props\n *\n * @example\n * ```tsx\n * <InputOTPGroup>\n *   <InputOTPSlot index={0} />\n *   <InputOTPSlot index={1} />\n *   <InputOTPSlot index={2} />\n * </InputOTPGroup>\n * <InputOTPSeparator />\n * <InputOTPGroup>\n *   <InputOTPSlot index={3} />\n *   <InputOTPSlot index={4} />\n *   <InputOTPSlot index={5} />\n * </InputOTPGroup>\n * ```\n */\nfunction InputOTPSeparator({ ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div data-slot=\"input-otp-separator\" role=\"separator\" {...props}>\n      <MinusIcon />\n    </div>\n  );\n}\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator };\n"
    }
  ]
}