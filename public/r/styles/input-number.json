{
  "name": "input-number",
  "type": "style",
  "files": [
    {
      "name": "input-number.tsx",
      "content": "import * as React from \"react\";\nimport { Minus, Plus } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\n\nexport interface InputNumberProps\n  extends Omit<React.ComponentProps<\"input\">, \"type\" | \"onChange\"> {\n  value?: number;\n  onChange?: (value: number) => void;\n  min?: number;\n  max?: number;\n  step?: number;\n  suffix?: string;\n  label?: string;\n  disabled?: boolean;\n  className?: string;\n}\n\n/**\n * InputNumber component with stepper buttons for numeric input.\n * \n * Features:\n * - Stepper buttons for increment/decrement\n * - Configurable min/max values and step size\n * - Optional suffix text\n * - Optional label\n * - Responsive design with max-width of 160px\n * - Uses design system CSS variables\n * - Accessible keyboard navigation\n * \n * @param value - Current numeric value\n * @param onChange - Callback when value changes\n * @param min - Minimum allowed value\n * @param max - Maximum allowed value\n * @param step - Step size for increment/decrement\n * @param suffix - Optional suffix text to display after the value\n * @param label - Optional label for the input\n * @param disabled - Whether the input is disabled\n * @param className - Additional CSS classes\n */\nfunction InputNumber({\n  value = 0,\n  onChange,\n  min,\n  max,\n  step = 1,\n  suffix,\n  label,\n  disabled = false,\n  className,\n  ...props\n}: InputNumberProps) {\n  const handleIncrement = () => {\n    if (disabled) return;\n    const newValue = value + step;\n    if (max === undefined || newValue <= max) {\n      onChange?.(newValue);\n    }\n  };\n\n  const handleDecrement = () => {\n    if (disabled) return;\n    const newValue = value - step;\n    if (min === undefined || newValue >= min) {\n      onChange?.(newValue);\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (disabled) return;\n    const inputValue = e.target.value;\n    \n    // Allow empty string for user to clear and type\n    if (inputValue === \"\") {\n      onChange?.(0);\n      return;\n    }\n    \n    const numericValue = parseFloat(inputValue);\n    if (!isNaN(numericValue)) {\n      // Check bounds\n      let clampedValue = numericValue;\n      if (min !== undefined) clampedValue = Math.max(clampedValue, min);\n      if (max !== undefined) clampedValue = Math.min(clampedValue, max);\n      \n      onChange?.(clampedValue);\n    }\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (disabled) return;\n    \n    if (e.key === \"ArrowUp\") {\n      e.preventDefault();\n      handleIncrement();\n    } else if (e.key === \"ArrowDown\") {\n      e.preventDefault();\n      handleDecrement();\n    }\n  };\n\n  const isMinDisabled = min !== undefined && value <= min;\n  const isMaxDisabled = max !== undefined && value >= max;\n\n  return (\n    <div className={cn(\"flex flex-col gap-1 w-full max-w-[160px]\", className)}>\n      {label && (\n        <label className=\"text-sm font-normal text-foreground leading-5\">\n          {label}\n        </label>\n      )}\n      <div className=\"relative h-8 rounded-md border border-border\">\n        <div className=\"flex h-full items-center overflow-hidden\">\n          {/* Minus Button */}\n          <Button\n            type=\"button\"\n            variant=\"ghost\"\n            size=\"icon-sm\"\n            onClick={handleDecrement}\n            disabled={disabled || isMinDisabled}\n            className=\"h-8 w-8 rounded-none rounded-l-md border-r border-border bg-component-default hover:bg-component-light\"\n          >\n            <Minus className=\"h-3 w-3\" />\n          </Button>\n          \n          {/* Input Field */}\n          <div className=\"flex-1 flex items-center px-3 py-1 bg-surface-default border-x border-border min-w-0\">\n            <input\n              type=\"text\"\n              value={value}\n              onChange={handleInputChange}\n              onKeyDown={handleKeyDown}\n              disabled={disabled}\n              className=\"w-full text-center text-sm font-normal text-foreground bg-transparent border-none outline-none placeholder:text-muted-foreground disabled:opacity-50 disabled:cursor-not-allowed\"\n              placeholder=\"0\"\n              {...props}\n            />\n            {suffix && (\n              <span className=\"text-xs text-muted-foreground ml-1 whitespace-nowrap\">\n                {suffix}\n              </span>\n            )}\n          </div>\n          \n          {/* Plus Button */}\n          <Button\n            type=\"button\"\n            variant=\"ghost\"\n            size=\"icon-sm\"\n            onClick={handleIncrement}\n            disabled={disabled || isMaxDisabled}\n            className=\"h-8 w-8 rounded-none rounded-r-md border-l border-border bg-component-default hover:bg-component-light\"\n          >\n            <Plus className=\"h-3 w-3\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport { InputNumber };",
      "type": "tsx"
    }
  ],
  "registryDependencies": ["button"],
  "files": [
    {
      "name": "input-number.tsx",
      "content": "import * as React from \"react\";\nimport { Minus, Plus } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\n\nexport interface InputNumberProps\n  extends Omit<React.ComponentProps<\"input\">, \"type\" | \"onChange\"> {\n  value?: number;\n  onChange?: (value: number) => void;\n  min?: number;\n  max?: number;\n  step?: number;\n  suffix?: string;\n  label?: string;\n  disabled?: boolean;\n  className?: string;\n}\n\n/**\n * InputNumber component with stepper buttons for numeric input.\n * \n * Features:\n * - Stepper buttons for increment/decrement\n * - Configurable min/max values and step size\n * - Optional suffix text\n * - Optional label\n * - Responsive design with max-width of 160px\n * - Uses design system CSS variables\n * - Accessible keyboard navigation\n * \n * @param value - Current numeric value\n * @param onChange - Callback when value changes\n * @param min - Minimum allowed value\n * @param max - Maximum allowed value\n * @param step - Step size for increment/decrement\n * @param suffix - Optional suffix text to display after the value\n * @param label - Optional label for the input\n * @param disabled - Whether the input is disabled\n * @param className - Additional CSS classes\n */\nfunction InputNumber({\n  value = 0,\n  onChange,\n  min,\n  max,\n  step = 1,\n  suffix,\n  label,\n  disabled = false,\n  className,\n  ...props\n}: InputNumberProps) {\n  const handleIncrement = () => {\n    if (disabled) return;\n    const newValue = value + step;\n    if (max === undefined || newValue <= max) {\n      onChange?.(newValue);\n    }\n  };\n\n  const handleDecrement = () => {\n    if (disabled) return;\n    const newValue = value - step;\n    if (min === undefined || newValue >= min) {\n      onChange?.(newValue);\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (disabled) return;\n    const inputValue = e.target.value;\n    \n    // Allow empty string for user to clear and type\n    if (inputValue === \"\") {\n      onChange?.(0);\n      return;\n    }\n    \n    const numericValue = parseFloat(inputValue);\n    if (!isNaN(numericValue)) {\n      // Check bounds\n      let clampedValue = numericValue;\n      if (min !== undefined) clampedValue = Math.max(clampedValue, min);\n      if (max !== undefined) clampedValue = Math.min(clampedValue, max);\n      \n      onChange?.(clampedValue);\n    }\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (disabled) return;\n    \n    if (e.key === \"ArrowUp\") {\n      e.preventDefault();\n      handleIncrement();\n    } else if (e.key === \"ArrowDown\") {\n      e.preventDefault();\n      handleDecrement();\n    }\n  };\n\n  const isMinDisabled = min !== undefined && value <= min;\n  const isMaxDisabled = max !== undefined && value >= max;\n\n  return (\n    <div className={cn(\"flex flex-col gap-1 w-full max-w-[160px]\", className)}>\n      {label && (\n        <label className=\"text-sm font-normal text-foreground leading-5\">\n          {label}\n        </label>\n      )}\n      <div className=\"relative h-8 rounded-md border border-border\">\n        <div className=\"flex h-full items-center overflow-hidden\">\n          {/* Minus Button */}\n          <Button\n            type=\"button\"\n            variant=\"ghost\"\n            size=\"icon-sm\"\n            onClick={handleDecrement}\n            disabled={disabled || isMinDisabled}\n            className=\"h-8 w-8 rounded-none rounded-l-md border-r border-border bg-component-default hover:bg-component-light\"\n          >\n            <Minus className=\"h-3 w-3\" />\n          </Button>\n          \n          {/* Input Field */}\n          <div className=\"flex-1 flex items-center px-3 py-1 bg-surface-default border-x border-border min-w-0\">\n            <input\n              type=\"text\"\n              value={value}\n              onChange={handleInputChange}\n              onKeyDown={handleKeyDown}\n              disabled={disabled}\n              className=\"w-full text-center text-sm font-normal text-foreground bg-transparent border-none outline-none placeholder:text-muted-foreground disabled:opacity-50 disabled:cursor-not-allowed\"\n              placeholder=\"0\"\n              {...props}\n            />\n            {suffix && (\n              <span className=\"text-xs text-muted-foreground ml-1 whitespace-nowrap\">\n                {suffix}\n              </span>\n            )}\n          </div>\n          \n          {/* Plus Button */}\n          <Button\n            type=\"button\"\n            variant=\"ghost\"\n            size=\"icon-sm\"\n            onClick={handleIncrement}\n            disabled={disabled || isMaxDisabled}\n            className=\"h-8 w-8 rounded-none rounded-r-md border-l border-border bg-component-default hover:bg-component-light\"\n          >\n            <Plus className=\"h-3 w-3\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport { InputNumber };",
      "type": "tsx"
    }
  ],
  "registryDependencies": ["button"],
  "type": "style"
}