{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "data-table-advanced",
  "type": "registry:ui",
  "title": "Data Table Advanced",
  "description": "Advanced data table with full power-user features including export functionality, column visibility, density controls, saved views, and advanced filtering.",
  "dependencies": [
    "@tanstack/react-table"
  ],
  "registryDependencies": [
    "data-table-standard",
    "data-table-pagination",
    "button",
    "checkbox",
    "dropdown-menu",
    "input",
    "select",
    "table",
    "https://eco-design-system-2.vercel.app/r/themes/theme.json"
  ],
  "files": [
    {
      "path": "src/components/ui/data-table-advanced.tsx",
      "content": "\"use client\";\n\nimport { type ColumnDef } from \"@tanstack/react-table\";\nimport {\n  Download,\n  Eye,\n  EyeOff,\n  Filter,\n  Layout,\n  Bookmark,\n  BookmarkCheck,\n  MoreHorizontal,\n  Settings,\n  FileText,\n  FileSpreadsheet,\n  FileImage\n} from \"lucide-react\";\nimport * as React from \"react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n  DropdownMenuCheckboxItem,\n} from \"@/components/ui/dropdown-menu\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  DataTableToolbar,\n  ToolbarLeft,\n  ToolbarRight,\n  GlobalSearch,\n  BulkActions,\n  ExportActions,\n  ColumnVisibility,\n  CustomActions,\n} from \"@/components/ui/data-table-toolbar\";\nimport { DataTableStandard, type DataTableStandardProps } from \"@/components/ui/data-table-standard\";\nimport { cn } from \"@/lib/utils\";\n\n/**\n * DataTableAdvanced component with full power-user feature set.\n *\n * **IMPORTANT FOR v0: This component uses data-table-specific CSS variables.\n * DO NOT use generic variables like --primary, --secondary, etc.\n * ONLY use the --data-table-* variables listed below.**\n *\n * **Available Components:**\n * - `DataTableAdvanced`: Main advanced data table component\n * - `createAdvancedFilter`: Utility for advanced filtering\n * - `createDensityControl`: Utility for density controls\n * - `createSavedViewsControl`: Utility for saved views\n *\n * **CSS Variables Used:**\n * - Background: --data-table-background, --data-table-foreground\n * - Border: --data-table-border, --data-table-border-hover\n * - Header: --data-table-header-background, --data-table-header-foreground\n * - Row: --data-table-row-hover, --data-table-row-selected\n * - Toolbar: --data-table-toolbar-background, --data-table-toolbar-foreground\n * - Export: --data-table-export-background, --data-table-export-foreground\n *\n * **Features:**\n * - All DataTableStandard features\n * - Export functionality (CSV, Excel, PDF)\n * - Column visibility toggle\n * - Custom toolbar actions slot\n * - Advanced filtering options\n * - Density controls (compact, normal, comfortable)\n * - Saved views/bookmarks\n * - Enhanced toolbar with all Advanced features\n * - Performance optimized for power users\n *\n * **v0 Usage Rules:**\n * 1. ALWAYS use the data-table-specific CSS variables (--data-table-*)\n * 2. NEVER use generic variables (--primary, --secondary, etc.)\n * 3. Use proper TypeScript interfaces for type safety\n * 4. Include proper accessibility attributes\n * 5. Handle loading and empty states appropriately\n * 6. Use consistent naming conventions\n * 7. Provide clear component composition patterns\n */\n\n// =============================================================================\n// TYPESCRIPT INTERFACES\n// =============================================================================\n\ninterface DataTableAdvancedProps<TData, TValue> extends DataTableStandardProps<TData, TValue> {\n  /** Export functionality configuration */\n  showExport?: boolean;\n  /** Column visibility toggle */\n  showColumnVisibility?: boolean;\n  /** Density controls */\n  showDensityControls?: boolean;\n  /** Custom toolbar actions */\n  customToolbarActions?: React.ReactNode;\n  /** Export options configuration */\n  exportOptions?: {\n    csv?: {\n      enabled?: boolean;\n      filename?: string;\n      includeHeaders?: boolean;\n    };\n    excel?: {\n      enabled?: boolean;\n      filename?: string;\n      sheetName?: string;\n      includeFormatting?: boolean;\n    };\n    pdf?: {\n      enabled?: boolean;\n      filename?: string;\n      title?: string;\n      includeHeaders?: boolean;\n    };\n    custom?: Array<{\n      label: string;\n      value: string;\n      icon?: React.ReactNode;\n      handler: (data: TData[], filters?: any) => void;\n    }>;\n  };\n  /** Export handler function */\n  onExport?: (format: string, data: TData[], options?: any) => void;\n  /** Saved views configuration */\n  savedViews?: {\n    enabled?: boolean;\n    views?: Array<{\n      id: string;\n      name: string;\n      description?: string;\n      filters?: any;\n      sorting?: any;\n      columnVisibility?: any;\n      density?: string;\n    }>;\n    onSaveView?: (view: any) => void;\n    onLoadView?: (viewId: string) => void;\n    onDeleteView?: (viewId: string) => void;\n  };\n  /** Advanced filtering options */\n  advancedFilters?: {\n    enabled?: boolean;\n    filters?: Array<{\n      id: string;\n      label: string;\n      type: \"text\" | \"select\" | \"date\" | \"number\";\n      options?: Array<{ label: string; value: string }>;\n      placeholder?: string;\n    }>;\n    onFilterChange?: (filters: any) => void;\n  };\n  /** Density options */\n  densityOptions?: Array<{\n    value: string;\n    label: string;\n    description?: string;\n  }>;\n  /** Default density */\n  defaultDensity?: \"compact\" | \"normal\" | \"comfortable\";\n}\n\ninterface SavedView {\n  id: string;\n  name: string;\n  description?: string;\n  filters?: any;\n  sorting?: any;\n  columnVisibility?: any;\n  density?: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n// =============================================================================\n// UTILITY FUNCTIONS\n// =============================================================================\n\n/**\n * Creates an advanced filter control\n */\nexport function createAdvancedFilter<TData>(\n  filters: any[],\n  onFilterChange: (filters: any) => void\n) {\n  return (\n    <div className=\"flex items-center space-x-2\">\n      <Label htmlFor=\"advanced-filter\">Advanced Filters</Label>\n      <Select onValueChange={(value) => onFilterChange({ type: value })}>\n        <SelectTrigger className=\"w-[180px]\">\n          <SelectValue placeholder=\"Select filter\" />\n        </SelectTrigger>\n        <SelectContent>\n          {filters.map((filter) => (\n            <SelectItem key={filter.id} value={filter.id}>\n              {filter.label}\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n    </div>\n  );\n}\n\n/**\n * Creates a density control\n */\nexport function createDensityControl(\n  density: string,\n  onDensityChange: (density: string) => void,\n  options: Array<{ value: string; label: string; description?: string }>\n) {\n  return (\n    <div className=\"flex items-center space-x-2\">\n      <Label htmlFor=\"density-control\">Density</Label>\n      <Select value={density} onValueChange={onDensityChange}>\n        <SelectTrigger className=\"w-[120px]\">\n          <SelectValue />\n        </SelectTrigger>\n        <SelectContent>\n          {options.map((option) => (\n            <SelectItem key={option.value} value={option.value}>\n              <div className=\"flex flex-col\">\n                <span>{option.label}</span>\n                {option.description && (\n                  <span className=\"text-xs text-muted-foreground\">\n                    {option.description}\n                  </span>\n                )}\n              </div>\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n    </div>\n  );\n}\n\n/**\n * Creates a saved views control\n */\nexport function createSavedViewsControl(\n  views: SavedView[],\n  currentViewId?: string,\n  onLoadView?: (viewId: string) => void,\n  onSaveView?: (view: any) => void,\n  onDeleteView?: (viewId: string) => void\n) {\n  return (\n    <div className=\"flex items-center space-x-2\">\n      <Label htmlFor=\"saved-views\">Saved Views</Label>\n      <Select value={currentViewId} onValueChange={onLoadView}>\n        <SelectTrigger className=\"w-[160px]\">\n          <SelectValue placeholder=\"Select view\" />\n        </SelectTrigger>\n        <SelectContent>\n          {views.map((view) => (\n            <SelectItem key={view.id} value={view.id}>\n              <div className=\"flex items-center justify-between w-full\">\n                <span>{view.name}</span>\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon-sm\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onDeleteView?.(view.id);\n                  }}\n                  className=\"ml-2 h-4 w-4\"\n                >\n                  <MoreHorizontal className=\"h-3 w-3\" />\n                </Button>\n              </div>\n            </SelectItem>\n          ))}\n        </SelectContent>\n      </Select>\n      <Button\n        variant=\"outline\"\n        size=\"sm\"\n        onClick={() => onSaveView?.({})}\n        className=\"h-8\"\n      >\n        <Bookmark className=\"h-3 w-3 mr-1\" />\n        Save\n      </Button>\n    </div>\n  );\n}\n\n// =============================================================================\n// EXPORT UTILITIES\n// =============================================================================\n\n/**\n * Export data to CSV format\n */\nexport function exportToCSV<TData>(\n  data: TData[],\n  columns: ColumnDef<TData>[],\n  options: {\n    filename?: string;\n    includeHeaders?: boolean;\n  } = {}\n) {\n  const { filename = \"export.csv\", includeHeaders = true } = options;\n\n  // Get visible columns\n  const visibleColumns = columns.filter(col =>\n    typeof col.accessorKey === \"string\" && col.accessorKey !== \"select\" && col.accessorKey !== \"actions\"\n  );\n\n  // Create CSV content\n  let csvContent = \"\";\n\n  // Add headers\n  if (includeHeaders) {\n    const headers = visibleColumns.map(col => col.header || col.accessorKey).join(\",\");\n    csvContent += headers + \"\\n\";\n  }\n\n  // Add data rows\n  data.forEach(row => {\n    const values = visibleColumns.map(col => {\n      const value = (row as any)[col.accessorKey as string];\n      return `\"${String(value || \"\").replace(/\"/g, '\"\"')}\"`;\n    });\n    csvContent += values.join(\",\") + \"\\n\";\n  });\n\n  // Download file\n  const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\n  const link = document.createElement(\"a\");\n  link.href = URL.createObjectURL(blob);\n  link.download = filename;\n  link.click();\n}\n\n/**\n * Export data to Excel format (simplified)\n */\nexport function exportToExcel<TData>(\n  data: TData[],\n  columns: ColumnDef<TData>[],\n  options: {\n    filename?: string;\n    sheetName?: string;\n  } = {}\n) {\n  const { filename = \"export.xlsx\", sheetName = \"Sheet1\" } = options;\n\n  // For now, we'll export as CSV with .xlsx extension\n  // In a real implementation, you'd use a library like xlsx\n  exportToCSV(data, columns, {\n    filename: filename.replace('.xlsx', '.csv'),\n    includeHeaders: true\n  });\n}\n\n/**\n * Export data to PDF format (simplified)\n */\nexport function exportToPDF<TData>(\n  data: TData[],\n  columns: ColumnDef<TData>[],\n  options: {\n    filename?: string;\n    title?: string;\n  } = {}\n) {\n  const { filename = \"export.pdf\", title = \"Data Export\" } = options;\n\n  // For now, we'll show an alert\n  // In a real implementation, you'd use a library like jsPDF\n  alert(`PDF export would generate: ${filename}\\nTitle: ${title}\\nRows: ${data.length}`);\n}\n\n// =============================================================================\n// MAIN COMPONENT\n// =============================================================================\n\nexport function DataTableAdvanced<TData, TValue>({\n  columns,\n  data,\n  globalSearch = { enabled: true, placeholder: \"Search...\", searchKey: \"name\" },\n  showRowSelection = true,\n  showBulkActions = true,\n  bulkActions,\n  rowActions,\n  pagination = { variant: \"advanced\", itemsPerPageOptions: [10, 25, 50, 100], defaultPageSize: 10 },\n  className,\n  columnWidths = { select: \"w-8\", actions: \"w-12\" },\n  isLoading = false,\n  loadingComponent,\n  emptyComponent,\n  ariaLabel = \"Advanced data table with full feature set\",\n  enableVirtualization = true,\n  virtualizeThreshold = 100,\n  // Advanced-specific props\n  showExport = true,\n  showColumnVisibility = true,\n  showDensityControls = true,\n  customToolbarActions,\n  exportOptions = {\n    csv: { enabled: true, filename: \"export.csv\", includeHeaders: true },\n    excel: { enabled: true, filename: \"export.xlsx\", sheetName: \"Sheet1\" },\n    pdf: { enabled: true, filename: \"export.pdf\", title: \"Data Export\" },\n  },\n  onExport,\n  savedViews = { enabled: false, views: [] },\n  advancedFilters = { enabled: false, filters: [] },\n  densityOptions = [\n    { value: \"compact\", label: \"Compact\", description: \"Dense layout\" },\n    { value: \"normal\", label: \"Normal\", description: \"Standard layout\" },\n    { value: \"comfortable\", label: \"Comfortable\", description: \"Spacious layout\" },\n  ],\n  defaultDensity = \"normal\",\n  ...standardProps\n}: DataTableAdvancedProps<TData, TValue>) {\n  // =============================================================================\n  // STATE MANAGEMENT\n  // =============================================================================\n\n  const [density, setDensity] = React.useState(defaultDensity);\n  const [currentViewId, setCurrentViewId] = React.useState<string | undefined>();\n  const [advancedFilterValues, setAdvancedFilterValues] = React.useState<Record<string, any>>({});\n\n  // =============================================================================\n  // EXPORT HANDLERS\n  // =============================================================================\n\n  const handleExport = React.useCallback((format: string, selectedRows?: TData[]) => {\n    const dataToExport = selectedRows || data;\n\n    if (onExport) {\n      onExport(format, dataToExport, { density, filters: advancedFilterValues });\n      return;\n    }\n\n    // Default export handlers\n    switch (format) {\n      case \"csv\":\n        if (exportOptions.csv?.enabled) {\n          exportToCSV(dataToExport, columns, {\n            filename: exportOptions.csv.filename,\n            includeHeaders: exportOptions.csv.includeHeaders,\n          });\n        }\n        break;\n      case \"excel\":\n        if (exportOptions.excel?.enabled) {\n          exportToExcel(dataToExport, columns, {\n            filename: exportOptions.excel.filename,\n            sheetName: exportOptions.excel.sheetName,\n          });\n        }\n        break;\n      case \"pdf\":\n        if (exportOptions.pdf?.enabled) {\n          exportToPDF(dataToExport, columns, {\n            filename: exportOptions.pdf.filename,\n            title: exportOptions.pdf.title,\n          });\n        }\n        break;\n      default:\n        // Handle custom export formats\n        const customExport = exportOptions.custom?.find(exp => exp.value === format);\n        if (customExport) {\n          customExport.handler(dataToExport, { density, filters: advancedFilterValues });\n        }\n        break;\n    }\n  }, [data, columns, onExport, exportOptions, density, advancedFilterValues]);\n\n  // =============================================================================\n  // SAVED VIEWS HANDLERS\n  // =============================================================================\n\n  const handleLoadView = React.useCallback((viewId: string) => {\n    const view = savedViews.views?.find(v => v.id === viewId);\n    if (view) {\n      setCurrentViewId(viewId);\n      // Apply view settings\n      if (view.density) setDensity(view.density);\n      if (view.filters) setAdvancedFilterValues(view.filters);\n      // Additional view loading logic would go here\n    }\n    savedViews.onLoadView?.(viewId);\n  }, [savedViews]);\n\n  const handleSaveView = React.useCallback((view: any) => {\n    const newView: SavedView = {\n      id: `view_${Date.now()}`,\n      name: view.name || `View ${Date.now()}`,\n      description: view.description,\n      filters: advancedFilterValues,\n      density,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    savedViews.onSaveView?.(newView);\n  }, [savedViews, advancedFilterValues, density]);\n\n  const handleDeleteView = React.useCallback((viewId: string) => {\n    savedViews.onDeleteView?.(viewId);\n    if (currentViewId === viewId) {\n      setCurrentViewId(undefined);\n    }\n  }, [savedViews, currentViewId]);\n\n  // =============================================================================\n  // ADVANCED FILTER HANDLERS\n  // =============================================================================\n\n  const handleAdvancedFilterChange = React.useCallback((filters: any) => {\n    setAdvancedFilterValues(prev => ({ ...prev, ...filters }));\n    advancedFilters.onFilterChange?.(filters);\n  }, [advancedFilters]);\n\n  // =============================================================================\n  // DENSITY HANDLERS\n  // =============================================================================\n\n  const handleDensityChange = React.useCallback((newDensity: string) => {\n    setDensity(newDensity);\n  }, []);\n\n  // =============================================================================\n  // ENHANCED BULK ACTIONS WITH EXPORT\n  // =============================================================================\n\n  const enhancedBulkActions = React.useMemo(() => {\n    if (!showBulkActions || !bulkActions) return [];\n\n    const actions = [];\n\n    // Add standard bulk actions\n    if (bulkActions.onDelete) {\n      actions.push({\n        label: \"Delete\",\n        value: \"delete\",\n        variant: \"destructive\" as const,\n        icon: <MoreHorizontal className=\"h-3 w-3\" />,\n      });\n    }\n\n    if (bulkActions.onExport) {\n      actions.push({\n        label: \"Export\",\n        value: \"export\",\n        variant: \"outline\" as const,\n        icon: <Download className=\"h-3 w-3\" />,\n      });\n    }\n\n    if (bulkActions.onActivate) {\n      actions.push({\n        label: \"Activate\",\n        value: \"activate\",\n        variant: \"default\" as const,\n        icon: <MoreHorizontal className=\"h-3 w-3\" />,\n      });\n    }\n\n    if (bulkActions.onDeactivate) {\n      actions.push({\n        label: \"Deactivate\",\n        value: \"deactivate\",\n        variant: \"outline\" as const,\n        icon: <MoreHorizontal className=\"h-3 w-3\" />,\n      });\n    }\n\n    // Add custom bulk actions\n    if (bulkActions.custom) {\n      actions.push(...bulkActions.custom);\n    }\n\n    return actions;\n  }, [showBulkActions, bulkActions]);\n\n  // =============================================================================\n  // EXPORT FORMATS CONFIGURATION\n  // =============================================================================\n\n  const exportFormats = React.useMemo(() => {\n    const formats = [];\n\n    if (exportOptions.csv?.enabled) {\n      formats.push({\n        label: \"Export as CSV\",\n        value: \"csv\",\n        icon: <FileText className=\"h-3 w-3\" />,\n      });\n    }\n\n    if (exportOptions.excel?.enabled) {\n      formats.push({\n        label: \"Export as Excel\",\n        value: \"excel\",\n        icon: <FileSpreadsheet className=\"h-3 w-3\" />,\n      });\n    }\n\n    if (exportOptions.pdf?.enabled) {\n      formats.push({\n        label: \"Export as PDF\",\n        value: \"pdf\",\n        icon: <FileImage className=\"h-3 w-3\" />,\n      });\n    }\n\n    if (exportOptions.custom) {\n      formats.push(...exportOptions.custom.map(custom => ({\n        label: custom.label,\n        value: custom.value,\n        icon: custom.icon,\n      })));\n    }\n\n    return formats;\n  }, [exportOptions]);\n\n  // =============================================================================\n  // DENSITY STYLES\n  // =============================================================================\n\n  const densityStyles = React.useMemo(() => {\n    switch (density) {\n      case \"compact\":\n        return \"text-xs [&_td]:py-1 [&_th]:py-1\";\n      case \"comfortable\":\n        return \"text-base [&_td]:py-3 [&_th]:py-3\";\n      default: // normal\n        return \"text-sm [&_td]:py-2 [&_th]:py-2\";\n    }\n  }, [density]);\n\n  // =============================================================================\n  // RENDER\n  // =============================================================================\n\n  return (\n    <div className={cn(\"w-full space-y-2\", className)} data-slot=\"data-table-advanced\">\n      {/* Enhanced Toolbar */}\n      <DataTableToolbar table={null} variant=\"advanced\">\n        <ToolbarLeft>\n          {globalSearch.enabled && (\n            <GlobalSearch\n              table={null}\n              searchKey={globalSearch.searchKey}\n              searchPlaceholder={globalSearch.placeholder}\n            />\n          )}\n          {showBulkActions && enhancedBulkActions.length > 0 && (\n            <BulkActions\n              table={null}\n              onBulkAction={(action, selectedRows) => {\n                if (action === \"export\") {\n                  handleExport(\"csv\", selectedRows);\n                } else {\n                  // Handle other bulk actions\n                  bulkActions?.onDelete?.(selectedRows);\n                }\n              }}\n              bulkActions={enhancedBulkActions}\n            />\n          )}\n          {advancedFilters.enabled && advancedFilters.filters && (\n            <div className=\"flex items-center space-x-2\">\n              {createAdvancedFilter(advancedFilters.filters, handleAdvancedFilterChange)}\n            </div>\n          )}\n        </ToolbarLeft>\n\n        <ToolbarRight>\n          {customToolbarActions}\n\n          {showDensityControls && (\n            <div className=\"flex items-center space-x-2\">\n              {createDensityControl(density, handleDensityChange, densityOptions)}\n            </div>\n          )}\n\n          {savedViews.enabled && savedViews.views && (\n            <div className=\"flex items-center space-x-2\">\n              {createSavedViewsControl(\n                savedViews.views,\n                currentViewId,\n                handleLoadView,\n                handleSaveView,\n                handleDeleteView\n              )}\n            </div>\n          )}\n\n          {showExport && (\n            <ExportActions\n              onExport={handleExport}\n              exportFormats={exportFormats}\n            />\n          )}\n\n          {showColumnVisibility && (\n            <ColumnVisibility table={null} />\n          )}\n        </ToolbarRight>\n      </DataTableToolbar>\n\n      {/* Enhanced DataTableStandard with density styles */}\n      <div className={cn(\"data-table-container\", densityStyles)}>\n        <DataTableStandard\n          columns={columns}\n          data={data}\n          globalSearch={globalSearch}\n          showRowSelection={showRowSelection}\n          showBulkActions={false} // Handled by advanced toolbar\n          bulkActions={bulkActions}\n          rowActions={rowActions}\n          pagination={pagination}\n          columnWidths={columnWidths}\n          isLoading={isLoading}\n          loadingComponent={loadingComponent}\n          emptyComponent={emptyComponent}\n          ariaLabel={ariaLabel}\n          enableVirtualization={enableVirtualization}\n          virtualizeThreshold={virtualizeThreshold}\n          {...standardProps}\n        />\n      </div>\n    </div>\n  );\n}\n\n// =============================================================================\n// EXPORTS\n// =============================================================================\n\nexport type { DataTableAdvancedProps, SavedView };\n",
      "type": "registry:component"
    }
  ]
}