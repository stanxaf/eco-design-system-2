{
  "name": "avatar",
  "type": "registry:ui",
  "title": "Avatar",
  "description": "An image element with a fallback for representing the user.",
  "registryDependencies": [
    "https://eco-design-system-2.vercel.app/r/styles/avatar.json",
    "https://eco-design-system-2.vercel.app/r/themes/theme.json"
  ],
  "files": [
    {
      "path": "src/components/ui/avatar.tsx",
      "type": "registry:component",
      "content": "\"use client\";\n\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\";\nimport { type VariantProps, cva } from \"class-variance-authority\";\nimport type * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\n/**\n * Avatar component with comprehensive size variant system and accessibility features.\n *\n * **Available Sizes:**\n * - `sm`: Small avatar (32px) - Compact layouts, user lists\n * - `md`: Medium avatar (40px) - Standard size, most use cases\n * - `lg`: Large avatar (48px) - Prominent display, headers\n *\n * **Features:**\n * - Size variants with precise pixel dimensions\n * - Image fallback for failed image loads\n * - Comprehensive accessibility (ARIA labels, screen reader support)\n * - Radix UI primitives for robust functionality\n * - Responsive design with proper scaling\n * - Fallback initials or icons support\n *\n * **Usage Examples:**\n * ```tsx\n * // Basic avatar\n * <Avatar>\n *   <AvatarImage src=\"/user.jpg\" alt=\"User avatar\" />\n *   <AvatarFallback>JD</AvatarFallback>\n * </Avatar>\n *\n * // With size variants\n * <Avatar size=\"sm\">\n *   <AvatarImage src=\"/user.jpg\" alt=\"User avatar\" />\n *   <AvatarFallback>JD</AvatarFallback>\n * </Avatar>\n *\n * <Avatar size=\"md\">\n *   <AvatarImage src=\"/user.jpg\" alt=\"User avatar\" />\n *   <AvatarFallback>JD</AvatarFallback>\n * </Avatar>\n *\n * <Avatar size=\"lg\">\n *   <AvatarImage src=\"/user.jpg\" alt=\"User avatar\" />\n *   <AvatarFallback>JD</AvatarFallback>\n * </Avatar>\n *\n * // All sizes\n * <div className=\"flex gap-4 items-center\">\n *   <Avatar size=\"sm\"><AvatarFallback>SM</AvatarFallback></Avatar>\n *   <Avatar size=\"md\"><AvatarFallback>MD</AvatarFallback></Avatar>\n *   <Avatar size=\"lg\"><AvatarFallback>LG</AvatarFallback></Avatar>\n * </div>\n * ```\n */\nconst avatarVariants = cva(\n  \"relative flex shrink-0 overflow-hidden rounded-full\",\n  {\n    variants: {\n      size: {\n        sm: \"size-8\", // 32px\n        md: \"size-10\", // 40px\n        lg: \"size-12\", // 48px\n      },\n    },\n    defaultVariants: {\n      size: \"md\",\n    },\n  },\n);\n\n/**\n * Props for the Avatar component.\n *\n * @property size - Avatar size variant (sm: 32px, md: 40px, lg: 48px)\n * @property className - Additional CSS classes\n * @property children - Avatar content (AvatarImage, AvatarFallback)\n */\nfunction Avatar({\n  className,\n  size,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Root> &\n  VariantProps<typeof avatarVariants>) {\n  return (\n    <AvatarPrimitive.Root\n      data-slot=\"avatar\"\n      className={cn(avatarVariants({ size, className }))}\n      {...props}\n    />\n  );\n}\n\n/**\n * AvatarImage component for displaying user profile images.\n *\n * **Usage:**\n * ```tsx\n * <AvatarImage src=\"/user.jpg\" alt=\"User avatar\" />\n * ```\n *\n * **Features:**\n * - Automatic aspect-square sizing\n * - Proper alt text support for accessibility\n * - Graceful fallback to AvatarFallback on load failure\n * - Responsive image handling\n */\nfunction AvatarImage({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Image>) {\n  return (\n    <AvatarPrimitive.Image\n      data-slot=\"avatar-image\"\n      className={cn(\"aspect-square size-full\", className)}\n      {...props}\n    />\n  );\n}\n\n/**\n * AvatarFallback component for displaying fallback content when images fail to load.\n *\n * **Usage:**\n * ```tsx\n * <AvatarFallback>JD</AvatarFallback>\n * <AvatarFallback><UserIcon className=\"size-4\" /></AvatarFallback>\n * ```\n *\n * **Features:**\n * - Displays initials, icons, or other fallback content\n * - Muted background for visual distinction\n * - Proper centering and sizing\n * - Accessible text and icon support\n */\nfunction AvatarFallback({\n  className,\n  ...props\n}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {\n  return (\n    <AvatarPrimitive.Fallback\n      data-slot=\"avatar-fallback\"\n      className={cn(\n        \"flex size-full items-center justify-center rounded-full bg-muted text-muted-foreground\",\n        className,\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Avatar, AvatarImage, AvatarFallback, avatarVariants };\n"
    }
  ]
}