{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "data-table-standard",
  "type": "registry:ui",
  "title": "Data Table Standard",
  "description": "Standard data table with core business features including global search, sorting, pagination, row selection, and bulk actions.",
  "dependencies": [
    "@tanstack/react-table"
  ],
  "registryDependencies": [
    "data-table-pagination",
    "button",
    "checkbox",
    "dropdown-menu",
    "input",
    "table",
    "https://eco-design-system-2.vercel.app/r/themes/theme.json"
  ],
  "files": [
    {
      "path": "src/components/ui/data-table-standard.tsx",
      "content": "\"use client\";\n\nimport {\n  type ColumnDef,\n  type ColumnFiltersState,\n  type SortingState,\n  type VisibilityState,\n  flexRender,\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\";\nimport { ArrowUpDown, ArrowUp, ArrowDown, MoreHorizontal } from \"lucide-react\";\nimport * as React from \"react\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { DataTablePagination } from \"@/components/ui/data-table-pagination\";\nimport {\n  DataTableToolbar,\n  ToolbarLeft,\n  ToolbarRight,\n  GlobalSearch,\n  BulkActions,\n  CustomActions,\n} from \"@/components/ui/data-table-toolbar\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n  useTablePerformance,\n  useTableAccessibility,\n} from \"@/components/ui/table\";\nimport { cn } from \"@/lib/utils\";\n\n/**\n * DataTableStandard component with core business application features.\n *\n * **IMPORTANT FOR v0: This component uses data-table-specific CSS variables.\n * DO NOT use generic variables like --primary, --secondary, etc.\n * ONLY use the --data-table-* variables listed below.**\n *\n * **Available Components:**\n * - `DataTableStandard`: Main data table with standard features\n * - `createSortableHeader`: Utility for sortable column headers\n * - `createRowSelectionColumn`: Utility for row selection column\n * - `createActionsColumn`: Utility for actions dropdown column\n *\n * **CSS Variables Used:**\n * - Background: --data-table-background, --data-table-foreground\n * - Border: --data-table-border, --data-table-border-hover\n * - Header: --data-table-header-background, --data-table-header-foreground\n * - Row: --data-table-row-hover, --data-table-row-selected\n * - Pagination: --data-table-pagination-background, --data-table-pagination-foreground\n *\n * **Features:**\n * - Global search across all columns\n * - Sorting on all sortable columns\n * - Pagination with customizable page sizes\n * - Row selection with bulk actions\n * - Per-row actions dropdown\n * - Responsive design with mobile-friendly layout\n * - Accessibility compliant with proper ARIA attributes\n * - Dark mode support with theme-aware colors\n * - Performance optimized for business applications\n *\n * **v0 Usage Rules:**\n * 1. ALWAYS use the data-table-specific CSS variables (--data-table-*)\n * 2. NEVER use generic variables (--primary, --secondary, etc.)\n * 3. Use proper TypeScript interfaces for type safety\n * 4. Include proper accessibility attributes\n * 5. Handle loading and empty states appropriately\n * 6. Use consistent naming conventions\n * 7. Provide clear column definitions with proper types\n */\n\n// =============================================================================\n// TYPESCRIPT INTERFACES\n// =============================================================================\n\ninterface DataTableStandardProps<TData, TValue> {\n  /** Column definitions for the table */\n  columns: ColumnDef<TData, TValue>[];\n  /** Data array to display */\n  data: TData[];\n  /** Global search configuration */\n  globalSearch?: {\n    enabled?: boolean;\n    placeholder?: string;\n    searchKey?: string;\n  };\n  /** Row selection configuration */\n  showRowSelection?: boolean;\n  /** Bulk actions configuration */\n  showBulkActions?: boolean;\n  /** Bulk actions handler */\n  bulkActions?: {\n    onDelete?: (selectedRows: TData[]) => void;\n    onExport?: (selectedRows: TData[]) => void;\n    onActivate?: (selectedRows: TData[]) => void;\n    onDeactivate?: (selectedRows: TData[]) => void;\n    custom?: Array<{\n      label: string;\n      value: string;\n      variant?: \"default\" | \"destructive\" | \"outline\" | \"secondary\" | \"ghost\" | \"link\";\n      icon?: React.ReactNode;\n      action: (selectedRows: TData[]) => void;\n    }>;\n  };\n  /** Per-row actions handler */\n  rowActions?: (row: TData) => React.ReactNode;\n  /** Pagination configuration */\n  pagination?: {\n    variant?: \"advanced\" | \"basic\";\n    itemsPerPageOptions?: number[];\n    defaultPageSize?: number;\n  };\n  /** Styling and layout */\n  className?: string;\n  columnWidths?: Record<string, string>;\n  /** Loading and empty states */\n  isLoading?: boolean;\n  loadingComponent?: React.ReactNode;\n  emptyComponent?: React.ReactNode;\n  /** Accessibility */\n  ariaLabel?: string;\n  /** Performance */\n  enableVirtualization?: boolean;\n  virtualizeThreshold?: number;\n}\n\n// =============================================================================\n// UTILITY FUNCTIONS\n// =============================================================================\n\n/**\n * Creates a sortable column header with visual indicators\n */\nexport function createSortableHeader<TData, TValue>(\n  column: any,\n  title: string\n) {\n  const sortState = column.getIsSorted();\n\n  const getSortIcon = () => {\n    if (sortState === \"asc\") {\n      return <ArrowUp className=\"h-4 w-4\" />;\n    } else if (sortState === \"desc\") {\n      return <ArrowDown className=\"h-4 w-4\" />;\n    }\n    return <ArrowUpDown className=\"h-4 w-4\" />;\n  };\n\n  return (\n    <div className=\"flex items-center gap-2 cursor-pointer hover:opacity-80 transition-opacity\">\n      <span>{title}</span>\n      {getSortIcon()}\n    </div>\n  );\n}\n\n/**\n * Creates a row selection column with header checkbox\n */\nexport function createRowSelectionColumn<TData>(): ColumnDef<TData> {\n  return {\n    id: \"select\",\n    size: 32,\n    minSize: 32,\n    maxSize: 32,\n    header: ({ table }) => (\n      <div className=\"flex justify-center\">\n        <Checkbox\n          checked={\n            table.getIsAllPageRowsSelected() ||\n            (table.getIsSomePageRowsSelected() && \"indeterminate\")\n          }\n          onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n          aria-label=\"Select all\"\n        />\n      </div>\n    ),\n    cell: ({ row }) => (\n      <div className=\"flex justify-center\">\n        <Checkbox\n          checked={row.getIsSelected()}\n          onCheckedChange={(value) => row.toggleSelected(!!value)}\n          aria-label=\"Select row\"\n        />\n      </div>\n    ),\n    enableSorting: false,\n    enableHiding: false,\n  };\n}\n\n/**\n * Creates an actions column with dropdown menu\n */\nexport function createActionsColumn<TData>(\n  actions: (row: TData) => React.ReactNode\n): ColumnDef<TData> {\n  return {\n    id: \"actions\",\n    size: 50,\n    enableHiding: false,\n    cell: ({ row }) => {\n      return (\n        <div className=\"flex justify-end\">\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" size=\"icon-sm\">\n                <span className=\"sr-only\">Open menu</span>\n                <MoreHorizontal />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\">\n              {actions(row.original)}\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      );\n    },\n  };\n}\n\n// =============================================================================\n// MAIN COMPONENT\n// =============================================================================\n\nexport function DataTableStandard<TData, TValue>({\n  columns,\n  data,\n  globalSearch = { enabled: true, placeholder: \"Search...\", searchKey: \"name\" },\n  showRowSelection = true,\n  showBulkActions = true,\n  bulkActions,\n  rowActions,\n  pagination = { variant: \"advanced\", itemsPerPageOptions: [10, 25, 50, 100], defaultPageSize: 10 },\n  className,\n  columnWidths = { select: \"w-8\", actions: \"w-12\" },\n  isLoading = false,\n  loadingComponent,\n  emptyComponent,\n  ariaLabel = \"Data table with sorting, filtering, and pagination\",\n  enableVirtualization = true,\n  virtualizeThreshold = 100,\n}: DataTableStandardProps<TData, TValue>) {\n  // =============================================================================\n  // STATE MANAGEMENT\n  // =============================================================================\n\n  const [sorting, setSorting] = React.useState<SortingState>([]);\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([]);\n  const [columnVisibility, setColumnVisibility] = React.useState<VisibilityState>({});\n  const [rowSelection, setRowSelection] = React.useState({});\n  const [pageSize, setPageSize] = React.useState(pagination.defaultPageSize || 10);\n  const [pageIndex, setPageIndex] = React.useState(0);\n\n  // =============================================================================\n  // PERFORMANCE OPTIMIZATION\n  // =============================================================================\n\n  const { shouldVirtualize, performanceWarning } = useTablePerformance(data, {\n    virtualizeThreshold,\n    enableVirtualization,\n    pageSize: pagination.defaultPageSize || 25,\n  });\n\n  // =============================================================================\n  // ACCESSIBILITY\n  // =============================================================================\n\n  const { tableProps } = useTableAccessibility({\n    caption: ariaLabel,\n    totalRows: data.length,\n    totalColumns: columns.length,\n  });\n\n  // =============================================================================\n  // COLUMN WIDTH GETTER\n  // =============================================================================\n\n  const getColumnWidth = React.useCallback((columnId: string) => {\n    return columnWidths[columnId] || \"\";\n  }, [columnWidths]);\n\n  // =============================================================================\n  // ENHANCED COLUMNS WITH ROW SELECTION AND ACTIONS\n  // =============================================================================\n\n  const enhancedColumns = React.useMemo(() => {\n    let enhancedCols = [...columns];\n\n    // Add row selection column if enabled\n    if (showRowSelection) {\n      enhancedCols = [createRowSelectionColumn<TData>(), ...enhancedCols];\n    }\n\n    // Add actions column if rowActions provided\n    if (rowActions) {\n      enhancedCols = [...enhancedCols, createActionsColumn<TData>(rowActions)];\n    }\n\n    return enhancedCols;\n  }, [columns, showRowSelection, rowActions]);\n\n  // =============================================================================\n  // TANSTACK TABLE CONFIGURATION\n  // =============================================================================\n\n  const table = useReactTable({\n    data,\n    columns: enhancedColumns,\n    onSortingChange: setSorting,\n    onColumnFiltersChange: setColumnFilters,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    onColumnVisibilityChange: setColumnVisibility,\n    onRowSelectionChange: setRowSelection,\n    onPaginationChange: (updater) => {\n      if (typeof updater === 'function') {\n        const newPagination = updater({ pageIndex, pageSize });\n        setPageIndex(newPagination.pageIndex);\n        setPageSize(newPagination.pageSize);\n      }\n    },\n    state: {\n      sorting,\n      columnFilters,\n      columnVisibility,\n      rowSelection,\n      pagination: {\n        pageIndex,\n        pageSize,\n      },\n    },\n    // Global filtering configuration\n    globalFilterFn: (row, columnId, value) => {\n      const searchValue = value.toLowerCase();\n      const rowValue = String(row.getValue(columnId)).toLowerCase();\n      return rowValue.includes(searchValue);\n    },\n  });\n\n  // =============================================================================\n  // EVENT HANDLERS\n  // =============================================================================\n\n  const handlePageChange = (page: number) => {\n    setPageIndex(page - 1);\n  };\n\n  const handleItemsPerPageChange = (newPageSize: number) => {\n    setPageSize(newPageSize);\n    setPageIndex(0); // Reset to first page when changing page size\n  };\n\n  const handleBulkAction = (action: string, selectedRows: TData[]) => {\n    if (!bulkActions) return;\n\n    switch (action) {\n      case \"delete\":\n        bulkActions.onDelete?.(selectedRows);\n        break;\n      case \"export\":\n        bulkActions.onExport?.(selectedRows);\n        break;\n      case \"activate\":\n        bulkActions.onActivate?.(selectedRows);\n        break;\n      case \"deactivate\":\n        bulkActions.onDeactivate?.(selectedRows);\n        break;\n      default:\n        // Handle custom actions\n        const customAction = bulkActions.custom?.find(a => a.value === action);\n        customAction?.action(selectedRows);\n        break;\n    }\n  };\n\n  // =============================================================================\n  // BULK ACTIONS CONFIGURATION\n  // =============================================================================\n\n  const bulkActionsConfig = React.useMemo(() => {\n    if (!showBulkActions || !bulkActions) return [];\n\n    const actions = [];\n\n    if (bulkActions.onDelete) {\n      actions.push({\n        label: \"Delete\",\n        value: \"delete\",\n        variant: \"destructive\" as const,\n        icon: <MoreHorizontal className=\"h-3 w-3\" />,\n      });\n    }\n\n    if (bulkActions.onExport) {\n      actions.push({\n        label: \"Export\",\n        value: \"export\",\n        variant: \"outline\" as const,\n        icon: <MoreHorizontal className=\"h-3 w-3\" />,\n      });\n    }\n\n    if (bulkActions.onActivate) {\n      actions.push({\n        label: \"Activate\",\n        value: \"activate\",\n        variant: \"default\" as const,\n        icon: <MoreHorizontal className=\"h-3 w-3\" />,\n      });\n    }\n\n    if (bulkActions.onDeactivate) {\n      actions.push({\n        label: \"Deactivate\",\n        value: \"deactivate\",\n        variant: \"outline\" as const,\n        icon: <MoreHorizontal className=\"h-3 w-3\" />,\n      });\n    }\n\n    if (bulkActions.custom) {\n      actions.push(...bulkActions.custom);\n    }\n\n    return actions;\n  }, [showBulkActions, bulkActions]);\n\n  // =============================================================================\n  // RENDER\n  // =============================================================================\n\n  return (\n    <div className={cn(\"w-full space-y-2\", className)} data-slot=\"data-table-standard\">\n      {/* Performance Warning */}\n      {performanceWarning && (\n        <div className=\"p-3 bg-yellow-50 border border-yellow-200 rounded-md text-sm text-yellow-800\">\n          ⚠️ {performanceWarning}\n        </div>\n      )}\n\n      {/* Toolbar */}\n      <DataTableToolbar table={table} variant=\"standard\">\n        <ToolbarLeft>\n          {globalSearch.enabled && (\n            <GlobalSearch\n              table={table}\n              searchKey={globalSearch.searchKey}\n              searchPlaceholder={globalSearch.placeholder}\n            />\n          )}\n          {showBulkActions && bulkActionsConfig.length > 0 && (\n            <BulkActions\n              table={table}\n              onBulkAction={handleBulkAction}\n              bulkActions={bulkActionsConfig}\n            />\n          )}\n        </ToolbarLeft>\n\n        <ToolbarRight>\n          <CustomActions>\n            {/* Additional custom actions can be added here */}\n          </CustomActions>\n        </ToolbarRight>\n      </DataTableToolbar>\n\n      {/* Table */}\n      <div data-slot=\"data-table-container\">\n        <Table\n          data-slot=\"data-table-main\"\n          isLoading={isLoading}\n          loadingComponent={loadingComponent}\n          isEmpty={!isLoading && table.getRowModel().rows?.length === 0}\n          emptyComponent={emptyComponent}\n          variant=\"data-table\"\n          ariaLabel={ariaLabel}\n          enableHorizontalScroll={true}\n          {...tableProps}\n        >\n          <TableHeader data-slot=\"data-table-header\">\n            {table.getHeaderGroups().map((headerGroup) => (\n              <TableRow key={headerGroup.id} data-slot=\"data-table-header-row\">\n                {headerGroup.headers.map((header) => {\n                  const isSortable = header.column.getCanSort();\n                  return (\n                    <TableHead\n                      key={header.id}\n                      data-slot=\"data-table-header-cell\"\n                      className={cn(getColumnWidth(header.id))}\n                      sortable={isSortable}\n                      sortDirection={isSortable ? (header.column.getIsSorted() || null) : null}\n                      onClick={isSortable ? () => header.column.toggleSorting(header.column.getIsSorted() === \"asc\") : undefined}\n                    >\n                      {header.isPlaceholder\n                        ? null\n                        : flexRender(\n                            header.column.columnDef.header,\n                            header.getContext()\n                          )}\n                    </TableHead>\n                  );\n                })}\n              </TableRow>\n            ))}\n          </TableHeader>\n          <TableBody data-slot=\"data-table-body\">\n            {table.getRowModel().rows.map((row) => (\n              <TableRow\n                key={row.id}\n                data-state={row.getIsSelected() ? \"selected\" : undefined}\n                data-slot=\"data-table-row\"\n                selectable={showRowSelection}\n                selected={row.getIsSelected()}\n                interactive={true}\n              >\n                {row.getVisibleCells().map((cell) => {\n                  return (\n                    <TableCell\n                      key={cell.id}\n                      data-slot=\"data-table-cell\"\n                      className={getColumnWidth(cell.column.id)}\n                    >\n                      {flexRender(\n                        cell.column.columnDef.cell,\n                        cell.getContext()\n                      )}\n                    </TableCell>\n                  );\n                })}\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </div>\n\n      {/* Pagination */}\n      <div data-slot=\"data-table-pagination\">\n        <DataTablePagination\n          variant={pagination.variant || \"advanced\"}\n          currentPage={pageIndex + 1}\n          totalPages={table.getPageCount()}\n          totalItems={table.getFilteredRowModel().rows.length}\n          itemsPerPage={pageSize}\n          onPageChange={handlePageChange}\n          onItemsPerPageChange={handleItemsPerPageChange}\n          itemsPerPageOptions={pagination.itemsPerPageOptions || [10, 25, 50, 100]}\n          className=\"w-full\"\n        />\n      </div>\n    </div>\n  );\n}\n\n// =============================================================================\n// EXPORTS\n// =============================================================================\n\nexport type { DataTableStandardProps };\n",
      "type": "registry:component"
    }
  ]
}