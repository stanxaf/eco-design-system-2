{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "brand-sidebar",
  "type": "registry:component",
  "title": "Brand Sidebar",
  "description": "A clean, semantic navigation sidebar with comprehensive accessibility features, keyboard navigation support, and production-ready design. Features include collapsible/expandable states, hover interactions, profile dropdowns, app switching, notifications with badges, and full ARIA compliance. Optimized for v0.dev integration with proper TypeScript support and customizable styling. Includes custom NavItem and NavButton components for flexible navigation patterns. Requires SidebarProvider context wrapper.",
  "registryDependencies": [
    "badge",
    "button",
    "sidebar",
    "dropdown-menu",
    "tooltip",
    "avatar",
    "input",
    "logo",
    "icons",
    "https://eco-design-system-2.vercel.app/r/themes/theme.json"
  ],
  "files": [
    {
      "path": "src/components/brand-sidebar.tsx",
      "content": "\"use client\";\n\nimport {\n  AudioWaveform,\n  BookOpen,\n  Bot,\n  ChevronRight,\n  ChevronsUpDown,\n  Command,\n  Frame,\n  GalleryVerticalEnd,\n  LogOut,\n  Map,\n  PieChart,\n  Search,\n  Settings2,\n  SquareTerminal,\n} from \"lucide-react\";\nimport * as React from \"react\";\n\nimport { useGlobalSearch } from \"./global-search/context\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from \"@/components/ui/collapsible\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarRail,\n} from \"@/components/ui/sidebar\";\n\n/**\n * Props for the BrandSidebar component\n */\ninterface BrandSidebarProps {\n  /** Additional CSS classes to apply to the sidebar container */\n  className?: string;\n  /** Force the team switcher to be visible even with single team (for testing/admin) */\n  forceTeamSwitcherVisible?: boolean;\n}\n\n// This is sample data.\n// QA: To test single team behavior, change teams array to have only one item:\n// teams: [{ name: \"Acme Inc\", logo: GalleryVerticalEnd, plan: \"Enterprise\" }]\nconst data = {\n  user: {\n    name: \"shadcn\",\n    email: \"m@example.com\",\n    avatar: \"/avatars/shadcn.jpg\",\n  },\n  teams: [\n    {\n      name: \"DTN\",\n      logo: GalleryVerticalEnd,\n      plan: \"Enterprise\",\n    },\n    // {\n    //   name: \"Acme Corp.\",\n    //   logo: AudioWaveform,\n    //   plan: \"Startup\",\n    // },\n    // {\n    //   name: \"Evil Corp.\",\n    //   logo: Command,\n    //   plan: \"Free\",\n    // },\n  ],\n  navMain: [\n    {\n      title: \"Playground\",\n      url: \"#\",\n      icon: SquareTerminal,\n      isActive: true,\n      items: [\n        {\n          title: \"History\",\n          url: \"#\",\n        },\n        {\n          title: \"Starred\",\n          url: \"#\",\n        },\n        {\n          title: \"Settings\",\n          url: \"#\",\n        },\n      ],\n    },\n    {\n      title: \"Models\",\n      url: \"#\",\n      icon: Bot,\n      items: [\n        {\n          title: \"Genesis\",\n          url: \"#\",\n        },\n        {\n          title: \"Explorer\",\n          url: \"#\",\n        },\n        {\n          title: \"Quantum\",\n          url: \"#\",\n        },\n      ],\n    },\n    {\n      title: \"Documentation\",\n      url: \"#\",\n      icon: BookOpen,\n      items: [\n        {\n          title: \"Introduction\",\n          url: \"#\",\n        },\n        {\n          title: \"Get Started\",\n          url: \"#\",\n        },\n        {\n          title: \"Tutorials\",\n          url: \"#\",\n        },\n        {\n          title: \"Changelog\",\n          url: \"#\",\n        },\n      ],\n    },\n    {\n      title: \"Settings\",\n      url: \"#\",\n      icon: Settings2,\n      items: [\n        {\n          title: \"General\",\n          url: \"#\",\n        },\n        {\n          title: \"Team\",\n          url: \"#\",\n        },\n        {\n          title: \"Billing\",\n          url: \"#\",\n        },\n        {\n          title: \"Limits\",\n          url: \"#\",\n        },\n      ],\n    },\n  ],\n  projects: [\n    {\n      name: \"Design Engineering\",\n      url: \"#\",\n      icon: Frame,\n    },\n    {\n      name: \"Sales & Marketing\",\n      url: \"#\",\n      icon: PieChart,\n    },\n    {\n      name: \"Travel\",\n      url: \"#\",\n      icon: Map,\n    },\n  ],\n};\n\n/**\n * BrandSidebar - A navigation sidebar component\n *\n * Based on the shadcn/ui sidebar-07 example that collapses to icons.\n * Features workspace switcher, collapsible nav sections, and user menu.\n *\n * IMPORTANT: Must be wrapped in SidebarProvider\n *\n * @example\n * ```tsx\n * import { SidebarProvider } from \"@/components/ui/sidebar\";\n * import { BrandSidebar } from \"@/components/brand-sidebar\";\n *\n * <SidebarProvider>\n *   <BrandSidebar />\n *   <main>\n *     <h1>Main Content</h1>\n *   </main>\n * </SidebarProvider>\n * ```\n */\nexport function BrandSidebar({\n  className,\n  forceTeamSwitcherVisible = false,\n}: BrandSidebarProps) {\n  const [activeTeam, setActiveTeam] = React.useState(data.teams[0]);\n  const { toggle } = useGlobalSearch();\n\n  // Determine if team switcher should be visible\n  const hasMultipleTeams = data.teams.length > 1;\n  const showTeamSwitcher = hasMultipleTeams || forceTeamSwitcherVisible;\n\n  return (\n    <Sidebar collapsible=\"icon\" className={className}>\n      <SidebarHeader className=\"border-b border-sidebar-border\">\n        <SidebarMenu>\n          <SidebarMenuItem>\n            {showTeamSwitcher ? (\n              // Full dropdown menu for multiple teams or forced visibility\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <SidebarMenuButton\n                    size=\"lg\"\n                    className=\"data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground\"\n                  >\n                    <div className=\"flex aspect-square size-8 items-center justify-center rounded-lg bg-sidebar-primary text-sidebar-primary-foreground\">\n                      <activeTeam.logo className=\"size-4\" />\n                    </div>\n                    <div className=\"grid flex-1 text-left text-sm leading-tight\">\n                      <span className=\"truncate font-semibold\">\n                        {activeTeam.name}\n                      </span>\n                      <span className=\"truncate text-xs\">\n                        {activeTeam.plan}\n                      </span>\n                    </div>\n                    <ChevronsUpDown className=\"ml-auto\" />\n                  </SidebarMenuButton>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent\n                  className=\"w-[--radix-dropdown-menu-trigger-width] min-w-56 rounded-lg\"\n                  align=\"start\"\n                  side=\"bottom\"\n                  sideOffset={4}\n                >\n                  <DropdownMenuLabel className=\"text-xs text-muted-foreground\">\n                    Teams\n                  </DropdownMenuLabel>\n                  {data.teams.map((team, index) => (\n                    <DropdownMenuItem\n                      key={team.name}\n                      onClick={() => setActiveTeam(team)}\n                      className=\"gap-2 p-2\"\n                    >\n                      <div className=\"flex size-6 items-center justify-center rounded-sm border\">\n                        <team.logo className=\"size-4 shrink-0\" />\n                      </div>\n                      {team.name}\n                    </DropdownMenuItem>\n                  ))}\n                </DropdownMenuContent>\n              </DropdownMenu>\n            ) : (\n              // Static display for single team (no dropdown functionality)\n              <SidebarMenuButton\n                size=\"lg\"\n                tooltip={`${activeTeam.name} - ${activeTeam.plan}`}\n              >\n                <div className=\"flex aspect-square size-8 items-center justify-center rounded-lg bg-sidebar-primary text-sidebar-primary-foreground\">\n                  <activeTeam.logo className=\"size-4\" />\n                </div>\n                <div className=\"grid flex-1 text-left text-sm leading-tight group-data-[collapsible=icon]:hidden\">\n                  <span className=\"truncate font-semibold\">\n                    {activeTeam.name}\n                  </span>\n                  <span className=\"truncate text-xs\">{activeTeam.plan}</span>\n                </div>\n                {/* No chevron for single team - static display only */}\n              </SidebarMenuButton>\n            )}\n          </SidebarMenuItem>\n        </SidebarMenu>\n      </SidebarHeader>\n\n      <SidebarContent>\n        {/* Global Search Trigger */}\n        <div className=\"border-b border-sidebar-border px-2 py-2 group-data-[collapsible=icon]:hidden\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground\" />\n            <Input\n              type=\"search\"\n              placeholder=\"Search everything... (âŒ˜K)\"\n              className=\"pl-8 cursor-pointer border-none bg-neutral-black\"\n              readOnly\n              onClick={toggle}\n              onFocus={toggle}\n              aria-label=\"Open global search\"\n            />\n          </div>\n        </div>\n\n        <SidebarGroup>\n          <SidebarGroupLabel>Platform</SidebarGroupLabel>\n          <SidebarMenu>\n            {data.navMain.map((item) => (\n              <Collapsible\n                key={item.title}\n                asChild\n                defaultOpen={item.isActive}\n                className=\"group/collapsible\"\n              >\n                <SidebarMenuItem>\n                  <CollapsibleTrigger asChild>\n                    <SidebarMenuButton tooltip={item.title}>\n                      {item.icon && <item.icon />}\n                      <span>{item.title}</span>\n                      <ChevronRight className=\"ml-auto transition-transform duration-200 group-data-[state=open]/collapsible:rotate-90\" />\n                    </SidebarMenuButton>\n                  </CollapsibleTrigger>\n                  <CollapsibleContent>\n                    <SidebarMenuSub>\n                      {item.items?.map((subItem) => (\n                        <SidebarMenuSubItem key={subItem.title}>\n                          <SidebarMenuSubButton asChild>\n                            <a href={subItem.url}>\n                              <span>{subItem.title}</span>\n                            </a>\n                          </SidebarMenuSubButton>\n                        </SidebarMenuSubItem>\n                      ))}\n                    </SidebarMenuSub>\n                  </CollapsibleContent>\n                </SidebarMenuItem>\n              </Collapsible>\n            ))}\n          </SidebarMenu>\n        </SidebarGroup>\n        <SidebarGroup className=\"group-data-[collapsible=icon]:hidden\">\n          <SidebarGroupLabel>Projects</SidebarGroupLabel>\n          <SidebarMenu>\n            {data.projects.map((item) => (\n              <SidebarMenuItem key={item.name}>\n                <SidebarMenuButton asChild>\n                  <a href={item.url}>\n                    <item.icon />\n                    <span>{item.name}</span>\n                  </a>\n                </SidebarMenuButton>\n              </SidebarMenuItem>\n            ))}\n          </SidebarMenu>\n        </SidebarGroup>\n      </SidebarContent>\n\n      <SidebarFooter className=\"border-t border-sidebar-border\">\n        <SidebarMenu>\n          <SidebarMenuItem>\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <SidebarMenuButton\n                  size=\"lg\"\n                  className=\"data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground\"\n                >\n                  <Avatar className=\"h-8 w-8\">\n                    <AvatarImage src={data.user.avatar} alt={data.user.name} />\n                    <AvatarFallback>CN</AvatarFallback>\n                  </Avatar>\n                  <div className=\"grid flex-1 text-left text-sm leading-tight\">\n                    <span className=\"truncate font-semibold\">\n                      {data.user.name}\n                    </span>\n                    <span className=\"truncate text-xs\">{data.user.email}</span>\n                  </div>\n                  <ChevronsUpDown className=\"ml-auto size-4\" />\n                </SidebarMenuButton>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent\n                className=\"w-[--radix-dropdown-menu-trigger-width] min-w-56 rounded-lg\"\n                side=\"bottom\"\n                align=\"end\"\n                sideOffset={4}\n              >\n                <DropdownMenuLabel className=\"p-0 font-normal\">\n                  <div className=\"flex items-center gap-2 px-1 py-1.5 text-left text-sm\">\n                    <Avatar className=\"h-8 w-8\">\n                      <AvatarImage\n                        src={data.user.avatar}\n                        alt={data.user.name}\n                      />\n                      <AvatarFallback>CN</AvatarFallback>\n                    </Avatar>\n                    <div className=\"grid flex-1 text-left text-sm leading-tight\">\n                      <span className=\"truncate font-semibold\">\n                        {data.user.name}\n                      </span>\n                      <span className=\"truncate text-xs\">\n                        {data.user.email}\n                      </span>\n                    </div>\n                  </div>\n                </DropdownMenuLabel>\n                <DropdownMenuSeparator />\n                <DropdownMenuGroup>\n                  <DropdownMenuItem>\n                    <Settings2 />\n                    Account\n                  </DropdownMenuItem>\n                </DropdownMenuGroup>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem>\n                  <LogOut />\n                  Log out\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </SidebarMenuItem>\n        </SidebarMenu>\n      </SidebarFooter>\n      <SidebarRail />\n    </Sidebar>\n  );\n}\n",
      "type": "registry:file",
      "target": "components/brand-sidebar.tsx"
    },
    {
      "path": "src/components/global-search/context.tsx",
      "content": "\"use client\";\n\nimport {\n  type GlobalSearchItem,\n  getGlobalSearchItems,\n} from \"../../lib/global-search-items\";\nimport type React from \"react\";\nimport { createContext, useContext, useEffect, useState } from \"react\";\n\ninterface GlobalSearchContextType {\n  open: boolean;\n  setOpen: (open: boolean) => void;\n  toggle: () => void;\n  items: GlobalSearchItem[];\n}\n\nconst GlobalSearchContext = createContext<GlobalSearchContextType | undefined>(\n  undefined,\n);\n\ninterface GlobalSearchProviderProps {\n  children: React.ReactNode;\n}\n\nexport function GlobalSearchProvider({ children }: GlobalSearchProviderProps) {\n  const [open, setOpen] = useState(false);\n  const items = getGlobalSearchItems();\n\n  const toggle = () => setOpen((prev) => !prev);\n\n  useEffect(() => {\n    const down = (e: KeyboardEvent) => {\n      if (e.key === \"k\" && (e.metaKey || e.ctrlKey)) {\n        e.preventDefault();\n        toggle();\n      }\n    };\n\n    document.addEventListener(\"keydown\", down);\n    return () => document.removeEventListener(\"keydown\", down);\n  }, []);\n\n  return (\n    <GlobalSearchContext.Provider\n      value={{\n        open,\n        setOpen,\n        toggle,\n        items,\n      }}\n    >\n      {children}\n    </GlobalSearchContext.Provider>\n  );\n}\n\nexport function useGlobalSearch() {\n  const context = useContext(GlobalSearchContext);\n  if (context === undefined) {\n    throw new Error(\n      \"useGlobalSearch must be used within a GlobalSearchProvider\",\n    );\n  }\n  return context;\n}\n",
      "type": "registry:file",
      "target": "components/global-search/context.tsx"
    },
    {
      "path": "src/lib/global-search-items.ts",
      "content": "import {\n  BookOpen,\n  Bot,\n  FileText,\n  Frame,\n  Home,\n  Layers,\n  Map,\n  Palette,\n  PieChart,\n  Search,\n  Settings2,\n  SquareTerminal,\n} from \"lucide-react\";\n\nexport interface GlobalSearchItem {\n  label: string;\n  href: string;\n  icon?: React.ComponentType<{ className?: string }>;\n  group: string;\n  keywords?: string[];\n}\n\n/**\n * Get all searchable items for the global command palette\n */\nexport function getGlobalSearchItems(): GlobalSearchItem[] {\n  return [\n    // Navigation\n    {\n      label: \"Home\",\n      href: \"/\",\n      icon: Home,\n      group: \"Navigation\",\n      keywords: [\"home\", \"main\", \"dashboard\"],\n    },\n    {\n      label: \"Playground\",\n      href: \"#\",\n      icon: SquareTerminal,\n      group: \"Platform\",\n      keywords: [\"playground\", \"terminal\", \"console\", \"development\"],\n    },\n    {\n      label: \"Models\",\n      href: \"#\",\n      icon: Bot,\n      group: \"Platform\",\n      keywords: [\"models\", \"ai\", \"bot\", \"machine learning\"],\n    },\n    {\n      label: \"Documentation\",\n      href: \"#\",\n      icon: BookOpen,\n      group: \"Platform\",\n      keywords: [\"docs\", \"documentation\", \"help\", \"guide\"],\n    },\n    {\n      label: \"Settings\",\n      href: \"#\",\n      icon: Settings2,\n      group: \"Platform\",\n      keywords: [\"settings\", \"preferences\", \"config\", \"configuration\"],\n    },\n\n    // Projects\n    {\n      label: \"Design Engineering\",\n      href: \"#\",\n      icon: Frame,\n      group: \"Projects\",\n      keywords: [\"design\", \"engineering\", \"ui\", \"ux\"],\n    },\n    {\n      label: \"Sales & Marketing\",\n      href: \"#\",\n      icon: PieChart,\n      group: \"Projects\",\n      keywords: [\"sales\", \"marketing\", \"analytics\", \"charts\"],\n    },\n    {\n      label: \"Travel\",\n      href: \"#\",\n      icon: Map,\n      group: \"Projects\",\n      keywords: [\"travel\", \"map\", \"location\", \"geography\"],\n    },\n\n    // Design System\n    {\n      label: \"Components\",\n      href: \"/\",\n      icon: Layers,\n      group: \"Design System\",\n      keywords: [\"components\", \"ui\", \"elements\", \"library\"],\n    },\n    {\n      label: \"Colors\",\n      href: \"/colors\",\n      icon: Palette,\n      group: \"Design System\",\n      keywords: [\"colors\", \"palette\", \"themes\", \"styling\"],\n    },\n    {\n      label: \"Typography\",\n      href: \"/typography\",\n      icon: FileText,\n      group: \"Design System\",\n      keywords: [\"typography\", \"fonts\", \"text\", \"type\"],\n    },\n    {\n      label: \"Tokens\",\n      href: \"/tokens\",\n      icon: Search,\n      group: \"Design System\",\n      keywords: [\"tokens\", \"design tokens\", \"variables\", \"css\"],\n    },\n  ];\n}\n",
      "type": "registry:file",
      "target": "lib/global-search-items.ts"
    },
    {
      "path": "src/layouts/shell-layout.tsx",
      "content": "import { Geist_Mono, Inter, Montserrat } from \"next/font/google\";\nimport React, { type ReactNode } from \"react\";\n\nimport Providers from \"@/app/providers\";\nimport { cn } from \"@/lib/utils\";\n\nimport \"@/app/globals.css\";\n\nconst InterSans = Inter({\n  subsets: [\"latin\"],\n  variable: \"--font-sans\",\n});\n\nconst GeistMono = Geist_Mono({\n  subsets: [\"latin\"],\n  variable: \"--font-mono\",\n});\n\nconst MontserratSerif = Montserrat({\n  subsets: [\"latin\"],\n  variable: \"--font-serif\",\n});\n\nexport default function ShellLayout({\n  children,\n}: Readonly<{\n  children: ReactNode;\n}>) {\n  return (\n    <html\n      lang=\"en\"\n      className={cn(\n        InterSans.variable,\n        GeistMono.variable,\n        MontserratSerif.variable,\n        \"bg-background text-foreground\",\n      )}\n    >\n      <body>\n        <Providers>{children}</Providers>\n      </body>\n    </html>\n  );\n}\n",
      "type": "registry:file",
      "target": "app/layout.tsx"
    },
    {
      "path": "src/app/demo/[name]/blocks/blank-page.tsx",
      "content": "export default function BlankPage() {\n  return (\n    <div className=\"flex flex-col items-center justify-center gap-4 rounded-md py-96\">\n      <div className=\"text-muted-foreground\">\n        Start prompting to use your component!\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/page.tsx"
    }
  ]
}