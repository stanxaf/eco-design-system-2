{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "map",
  "type": "registry:component",
  "title": "Map",
  "description": "A fully-featured Mapbox map component with theme integration, built-in controls, and accessibility features. Supports light/dark mode, custom styling, and comprehensive TypeScript definitions. Requires a Mapbox access token (get one free at mapbox.com).",
  "dependencies": [
    "mapbox-gl"
  ],
  "registryDependencies": [
    "button",
    "badge",
    "card",
    "https://eco-design-system-2.vercel.app/r/styles/icons.json",
    "https://eco-design-system-2.vercel.app/r/themes/theme.json"
  ],
  "files": [
    {
      "path": "src/components/ui/map.tsx",
      "content": "\"use client\";\n\nimport { useEffect, useRef, useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Navigation,\n  ZoomIn,\n  ZoomOut,\n  MapPin,\n  RotateCcw,\n  Map as MapIcon\n} from \"lucide-react\";\n\n// Import Mapbox CSS\nimport \"mapbox-gl/dist/mapbox-gl.css\";\n\n// Import mapbox-gl with proper type handling\nimport mapboxgl from \"mapbox-gl\";\n\n/**\n * Map component with Mapbox integration for the DTN design system.\n *\n * **Features:**\n * - Mapbox GL JS integration with free tier support\n * - Theme-aware styling (light/dark mode)\n * - Built-in controls (zoom, navigation, geolocation)\n * - Accessibility support with proper ARIA labels\n * - Customizable styling with className support\n * - TypeScript definitions for all props\n * - Responsive design with proper sizing\n *\n * **Required Props:**\n * - `accessToken`: Your Mapbox access token\n *\n * **Optional Props:**\n * - `className`: Additional CSS classes\n * - `center`: Initial map center [lng, lat] (default: [-98.5795, 39.8283])\n * - `zoom`: Initial zoom level (default: 4)\n * - `style`: Mapbox style URL (auto-detected based on theme)\n * - `showControls`: Show built-in controls (default: true)\n * - `showNavigation`: Show navigation control (default: true)\n * - `showZoom`: Show zoom controls (default: true)\n * - `showGeolocation`: Show geolocation button (default: true)\n * - `showReset`: Show reset button (default: true)\n * - `height`: Map height (default: \"400px\")\n * - `width`: Map width (default: \"100%\")\n *\n * **Theme Integration:**\n * - Automatically switches between light and dark map styles\n * - Uses CSS variables for consistent theming\n * - Supports both light and dark mode\n *\n * **Usage Examples:**\n * ```tsx\n * // Basic map\n * <Map accessToken=\"your-mapbox-token\" />\n *\n * // Custom center and zoom\n * <Map\n *   accessToken=\"your-mapbox-token\"\n *   center={[-74.006, 40.7128]}\n *   zoom={12}\n * />\n *\n * // Custom height and styling\n * <Map\n *   accessToken=\"your-mapbox-token\"\n *   height=\"500px\"\n *   className=\"rounded-lg border\"\n * />\n *\n * // Minimal controls\n * <Map\n *   accessToken=\"your-mapbox-token\"\n *   showControls={false}\n * />\n * ```\n */\n\nexport interface MapProps {\n  /** Mapbox access token - required for map functionality */\n  accessToken: string;\n  /** Additional CSS classes */\n  className?: string;\n  /** Initial map center coordinates [longitude, latitude] */\n  center?: [number, number];\n  /** Initial zoom level */\n  zoom?: number;\n  /** Custom Mapbox style URL - overrides theme-based selection */\n  style?: string;\n  /** Show built-in control buttons */\n  showControls?: boolean;\n  /** Show navigation control (compass) */\n  showNavigation?: boolean;\n  /** Show zoom in/out buttons */\n  showZoom?: boolean;\n  /** Show geolocation button */\n  showGeolocation?: boolean;\n  /** Show reset button */\n  showReset?: boolean;\n  /** Map height */\n  height?: string;\n  /** Map width */\n  width?: string;\n  /** Callback when map is loaded */\n  onLoad?: (map: mapboxgl.Map) => void;\n  /** Callback when map center changes */\n  onMove?: (center: [number, number]) => void;\n  /** Callback when map zoom changes */\n  onZoom?: (zoom: number) => void;\n  /** Accessibility label for the map */\n  \"aria-label\"?: string;\n}\n\n/**\n * Get the appropriate Mapbox style based on the current theme\n */\nfunction getMapStyle(style?: string, isDark?: boolean): string {\n  if (style) return style;\n\n  // Default styles for light and dark themes\n  return isDark\n    ? \"mapbox://styles/mapbox/dark-v11\"\n    : \"mapbox://styles/mapbox/light-v11\";\n}\n\n/**\n * Get the current theme from the document\n */\nfunction getCurrentTheme(): boolean {\n  if (typeof window === \"undefined\") return false;\n  return document.documentElement.classList.contains(\"dark\");\n}\n\nexport function Map({\n  accessToken,\n  className,\n  center = [-98.5795, 39.8283], // Center of USA\n  zoom = 4,\n  style,\n  showControls = true,\n  showNavigation = true,\n  showZoom = true,\n  showGeolocation = true,\n  showReset = true,\n  height = \"400px\",\n  width = \"100%\",\n  onLoad,\n  onMove,\n  onZoom,\n  \"aria-label\": ariaLabel = \"Interactive map\",\n  ...props\n}: MapProps) {\n  const mapContainer = useRef<HTMLDivElement>(null);\n  const map = useRef<mapboxgl.Map | null>(null);\n  const [isDark, setIsDark] = useState(false);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [isMounted, setIsMounted] = useState(false);\n  const [currentCenter, setCurrentCenter] = useState<[number, number]>(center);\n  const [currentZoom, setCurrentZoom] = useState(zoom);\n  const [geolocationError, setGeolocationError] = useState<string | null>(null);\n  const [mapError, setMapError] = useState<string | null>(null);\n\n  // Handle client-side mounting\n  useEffect(() => {\n    setIsMounted(true);\n  }, []);\n\n  // Set Mapbox access token\n  useEffect(() => {\n    if (typeof window !== \"undefined\") {\n      mapboxgl.accessToken = accessToken;\n    }\n  }, [accessToken]);\n\n  // Initialize map\n  useEffect(() => {\n    if (!isMounted || !mapContainer.current || map.current || typeof window === \"undefined\") return;\n\n    try {\n      const theme = getCurrentTheme();\n      setIsDark(theme);\n\n      map.current = new mapboxgl.Map({\n        container: mapContainer.current,\n        style: getMapStyle(style, theme),\n        center: center,\n        zoom: zoom,\n        attributionControl: false,\n        ...props,\n      });\n    } catch (error) {\n      console.error('Failed to initialize map:', error);\n      setMapError('Map failed to load. Please provide a valid Mapbox access token. Get yours at mapbox.com');\n      return;\n    }\n\n    // Add attribution control in bottom-right corner\n    map.current.addControl(new mapboxgl.AttributionControl({\n      compact: true,\n    }), 'bottom-right');\n\n    // Handle map load\n    map.current.on(\"load\", () => {\n      setIsLoaded(true);\n      onLoad?.(map.current!);\n    });\n\n    // Handle map errors\n    map.current.on(\"error\", (e) => {\n      console.error('Map error:', e);\n      setMapError('Map failed to load. Please provide a valid Mapbox access token. Get yours at mapbox.com');\n    });\n\n    // Handle map movement\n    map.current.on(\"move\", () => {\n      const center = map.current!.getCenter();\n      const newCenter: [number, number] = [center.lng, center.lat];\n      setCurrentCenter(newCenter);\n      onMove?.(newCenter);\n    });\n\n    // Handle zoom changes\n    map.current.on(\"zoom\", () => {\n      const newZoom = map.current!.getZoom();\n      setCurrentZoom(newZoom);\n      onZoom?.(newZoom);\n    });\n\n    // Cleanup\n    return () => {\n      if (map.current) {\n        map.current.remove();\n        map.current = null;\n      }\n    };\n  }, [isMounted, accessToken, center, zoom, style, onLoad, onMove, onZoom, props]);\n\n  // Handle theme changes\n  useEffect(() => {\n    if (!map.current || !isLoaded) return;\n\n    const newStyle = getMapStyle(style, isDark);\n    map.current.setStyle(newStyle);\n  }, [isDark, style, isLoaded]);\n\n  // Watch for theme changes\n  useEffect(() => {\n    const observer = new MutationObserver(() => {\n      const newTheme = getCurrentTheme();\n      if (newTheme !== isDark) {\n        setIsDark(newTheme);\n      }\n    });\n\n    observer.observe(document.documentElement, {\n      attributes: true,\n      attributeFilter: [\"class\"],\n    });\n\n    return () => observer.disconnect();\n  }, [isDark]);\n\n  // Control handlers\n  const handleZoomIn = () => {\n    if (map.current) {\n      map.current.zoomIn();\n    }\n  };\n\n  const handleZoomOut = () => {\n    if (map.current) {\n      map.current.zoomOut();\n    }\n  };\n\n  const handleGeolocation = () => {\n    if (!navigator.geolocation) {\n      setGeolocationError(\"Geolocation is not supported by this browser.\");\n      return;\n    }\n\n    setGeolocationError(null);\n\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        const { longitude, latitude } = position.coords;\n        if (map.current) {\n          map.current.flyTo({\n            center: [longitude, latitude],\n            zoom: 12,\n          });\n        }\n      },\n      (error) => {\n        setGeolocationError(`Geolocation error: ${error.message}`);\n      }\n    );\n  };\n\n  const handleReset = () => {\n    if (map.current) {\n      map.current.flyTo({\n        center: center,\n        zoom: zoom,\n      });\n    }\n  };\n\n  const handleNavigation = () => {\n    if (map.current) {\n      map.current.resetNorth();\n    }\n  };\n\n  return (\n    <div className={cn(\"relative\", className)}>\n      {/* Map container */}\n      <div\n        ref={mapContainer}\n        className=\"w-full h-full\"\n        style={{ height, width }}\n        role=\"img\"\n        aria-label={ariaLabel}\n        aria-live=\"polite\"\n        aria-atomic=\"true\"\n      />\n\n      {/* Custom controls */}\n      {showControls && (\n        <div className=\"absolute top-4 right-4 flex flex-col gap-2\">\n          {/* Zoom controls */}\n          {showZoom && (\n            <div className=\"flex flex-col gap-1\">\n              <Button\n                size=\"icon-sm\"\n                variant=\"outline\"\n                onClick={handleZoomIn}\n                aria-label=\"Zoom in\"\n                className=\"bg-background/95 backdrop-blur-sm\"\n              >\n                <ZoomIn className=\"size-3\" />\n              </Button>\n              <Button\n                size=\"icon-sm\"\n                variant=\"outline\"\n                onClick={handleZoomOut}\n                aria-label=\"Zoom out\"\n                className=\"bg-background/95 backdrop-blur-sm\"\n              >\n                <ZoomOut className=\"size-3\" />\n              </Button>\n            </div>\n          )}\n\n          {/* Navigation control */}\n          {showNavigation && (\n            <Button\n              size=\"icon-sm\"\n              variant=\"outline\"\n              onClick={handleNavigation}\n              aria-label=\"Reset north\"\n              className=\"bg-background/95 backdrop-blur-sm\"\n            >\n              <Navigation className=\"size-3\" />\n            </Button>\n          )}\n\n          {/* Geolocation control */}\n          {showGeolocation && (\n            <Button\n              size=\"icon-sm\"\n              variant=\"outline\"\n              onClick={handleGeolocation}\n              aria-label=\"Find my location\"\n              className=\"bg-background/95 backdrop-blur-sm\"\n            >\n              <MapPin className=\"size-3\" />\n            </Button>\n          )}\n\n          {/* Reset control */}\n          {showReset && (\n            <Button\n              size=\"icon-sm\"\n              variant=\"outline\"\n              onClick={handleReset}\n              aria-label=\"Reset to initial view\"\n              className=\"bg-background/95 backdrop-blur-sm\"\n            >\n              <RotateCcw className=\"size-3\" />\n            </Button>\n          )}\n        </div>\n      )}\n\n      {/* Error messages */}\n      {mapError && (\n        <div className=\"absolute inset-0 flex items-center justify-center bg-background/95 backdrop-blur-sm rounded-lg border border-border\">\n          <div className=\"text-center p-6 max-w-sm\">\n            <MapIcon className=\"size-12 text-muted-foreground mx-auto mb-3\" />\n            <h3 className=\"font-medium text-sm mb-2\">Map Component</h3>\n            <p className=\"text-xs text-muted-foreground mb-3\">{mapError}</p>\n            <p className=\"text-xs text-muted-foreground\">\n              Replace <code className=\"bg-muted px-1 rounded\">pk.your-mapbox-token-here</code> with your actual token\n            </p>\n          </div>\n        </div>\n      )}\n\n      {geolocationError && !mapError && (\n        <div className=\"absolute bottom-4 left-4 right-4 bg-destructive text-destructive-foreground p-3 rounded-lg text-sm\">\n          {geolocationError}\n        </div>\n      )}\n\n      {/* Loading indicator */}\n      {(!isMounted || !isLoaded) && !mapError && (\n        <div className=\"absolute inset-0 flex items-center justify-center bg-muted/50 rounded-lg\">\n          <div className=\"flex items-center gap-2 text-muted-foreground\">\n            <MapIcon className=\"size-4 animate-pulse\" />\n            <span className=\"text-sm\">{!isMounted ? \"Initializing...\" : \"Loading map...\"}</span>\n          </div>\n        </div>\n      )}\n\n      {/* Map info */}\n      {isLoaded && showControls && (\n        <div className=\"absolute bottom-4 left-4 bg-background/95 backdrop-blur-sm px-3 py-2 rounded-lg text-xs text-muted-foreground border border-border\">\n          <div>Center: {currentCenter[1].toFixed(4)}, {currentCenter[0].toFixed(4)}</div>\n          <div>Zoom: {currentZoom.toFixed(1)}</div>\n        </div>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}