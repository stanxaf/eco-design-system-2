{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "brand-sidebar",
  "type": "registry:component",
  "title": "Brand Sidebar",
  "description": "A styled, simple, reusable sidebar",
  "registryDependencies": [
    "badge",
    "button",
    "sidebar",
    "icons",
    "https://eco-design-system-2.vercel.app/r/styles/sonner.json",
    "https://eco-design-system-2.vercel.app/r/themes/theme.json"
  ],
  "files": [
    {
      "path": "src/components/brand-sidebar.tsx",
      "content": "\"use client\";\n\nimport { usePathname } from \"next/navigation\";\nimport * as React from \"react\";\n\nimport { Logo } from \"@/components/logo\";\nimport { Icons } from \"@/components/icons\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarHeader,\n  SidebarMenu,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  useSidebar,\n} from \"@/components/ui/sidebar\";\nimport { cn } from \"@/lib/utils\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\ninterface NavItem {\n  title: string;\n  href: string;\n  icon: React.ReactNode;\n  badge?: {\n    text: string;\n  };\n}\n\ninterface BrandSidebarProps {\n  className?: string;\n}\n\n// Custom NavItem component for semantic navigation\ninterface NavItemProps {\n  href: string;\n  isActive?: boolean;\n  tooltip?: string;\n  className?: string;\n  onClick?: () => void;\n  children: React.ReactNode;\n  style?: React.CSSProperties;\n}\n\nfunction NavItem({ href, isActive = false, tooltip, className, onClick, children, style }: NavItemProps) {\n  const { isMobile, state } = useSidebar();\n\n  const handleClick = (e: React.MouseEvent<HTMLAnchorElement>) => {\n    // In demo context, prevent navigation and show tooltip\n    if (window.location.pathname.includes(\"/demo/\")) {\n      e.preventDefault();\n      return;\n    }\n    onClick?.();\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLAnchorElement>) => {\n    if (e.key === \"Enter\" || e.key === \" \") {\n      e.preventDefault();\n      handleClick(e as any);\n    }\n  };\n\n  const navLink = (\n    <a\n      href={href}\n      onClick={handleClick}\n      onKeyDown={handleKeyDown}\n      className={cn(\n        \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md h-8 px-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:size-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:px-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        isActive && \"bg-sidebar-accent font-medium text-sidebar-accent-foreground\",\n        className\n      )}\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size=\"default\"\n      data-active={isActive}\n      aria-current={isActive ? \"page\" : undefined}\n      role=\"menuitem\"\n      tabIndex={0}\n      style={style}\n    >\n      {children}\n    </a>\n  );\n\n  if (!tooltip) {\n    return navLink;\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{navLink}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n      >\n        {tooltip}\n      </TooltipContent>\n    </Tooltip>\n  );\n}\n\n// Custom NavButton component for non-navigation actions (like dropdowns)\ninterface NavButtonProps {\n  tooltip?: string;\n  className?: string;\n  onClick?: () => void;\n  children: React.ReactNode;\n  'aria-label'?: string;\n  'aria-pressed'?: boolean;\n}\n\nfunction NavButton({ tooltip, className, onClick, children, 'aria-label': ariaLabel, 'aria-pressed': ariaPressed }: NavButtonProps) {\n  const { isMobile, state } = useSidebar();\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLButtonElement>) => {\n    if (e.key === \"Enter\" || e.key === \" \") {\n      e.preventDefault();\n      onClick?.();\n    }\n  };\n\n  const navButton = (\n    <button\n      onClick={onClick}\n      onKeyDown={handleKeyDown}\n      className={cn(\n        \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md h-8 px-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:size-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:px-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        className\n      )}\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size=\"default\"\n      role=\"menuitem\"\n      tabIndex={0}\n      aria-label={ariaLabel}\n      aria-pressed={ariaPressed}\n    >\n      {children}\n    </button>\n  );\n\n  if (!tooltip) {\n    return navButton;\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{navButton}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n      >\n        {tooltip}\n      </TooltipContent>\n    </Tooltip>\n  );\n}\n\n\n// Profile Menu Header Component\ninterface ProfileMenuHeaderProps {\n  name: string;\n  email: string;\n  company: string;\n  role: string;\n  avatar: {\n    src: string;\n    alt: string;\n    initials: string;\n  };\n}\n\nfunction ProfileMenuHeader({ name, email, company, role, avatar }: ProfileMenuHeaderProps) {\n  return (\n    <div className=\"flex flex-col space-y-3 p-4 border-b border-border\">\n      <div className=\"flex items-center space-x-3\">\n        <Avatar className=\"size-12\">\n          <AvatarImage\n            src={avatar.src}\n            alt={avatar.alt}\n          />\n          <AvatarFallback className=\"bg-primary text-primary-foreground\">\n            <span className=\"text-sm font-medium\">\n              {avatar.initials}\n            </span>\n          </AvatarFallback>\n        </Avatar>\n        <div className=\"flex-1 min-w-0\">\n          <h3 className=\"text-sm font-semibold text-foreground truncate\" id=\"profile-name\">\n            {name}\n          </h3>\n          <p className=\"text-xs text-muted-foreground truncate\" id=\"profile-email\">\n            {email}\n          </p>\n        </div>\n      </div>\n      <div className=\"text-xs text-muted-foreground\">\n        <span className=\"font-medium\">{company}</span>\n        <span className=\"mx-1\">â€¢</span>\n        <span>{role}</span>\n      </div>\n    </div>\n  );\n}\n\nexport function BrandSidebar({ className }: BrandSidebarProps) {\n  const pathname = usePathname();\n  const { state, toggleSidebar, setOpen, isMobile } = useSidebar();\n  const isCollapsed = state === \"collapsed\";\n\n  // Hover state management with smooth transitions\n  const [isHovered, setIsHovered] = React.useState(false);\n  const [isPinned, setIsPinned] = React.useState(false);\n  const [hoverDisabled, setHoverDisabled] = React.useState(false);\n  const [showContent, setShowContent] = React.useState(!isCollapsed);\n\n  // Account switching state\n  const [isSwitchAccountOpen, setIsSwitchAccountOpen] = React.useState(false);\n  const [currentAccount, setCurrentAccount] = React.useState({\n    name: \"Sarah Chen\",\n    email: \"sarah.chen@dtn.com\",\n    company: \"DTN\",\n    role: \"Senior Product Manager\",\n    initials: \"SC\",\n  });\n\n  // Profile dropdown state\n  const [isProfileOpen, setIsProfileOpen] = React.useState(false);\n\n  // Apps dropdown state\n  const [isAppsOpen, setIsAppsOpen] = React.useState(false);\n\n  // DTN Products data\n  const dtnProducts = [\n    {\n      id: \"1\",\n      name: \"Weather Hub\",\n      description: \"Weather forecasting and analytics\",\n      icon: \"cloud-sun\",\n    },\n    {\n      id: \"2\",\n      name: \"Fuel Hub\",\n      description: \"Fuel price tracking and procurement\",\n      icon: \"gas-pump\",\n    },\n    {\n      id: \"3\",\n      name: \"Identity Management\",\n      description: \"User access and permissions\",\n      icon: \"shield-halved\",\n    },\n  ];\n\n  // All accounts data (including current)\n  const allAccounts = [\n    { id: \"1\", company: \"DTN\", isCurrent: true },\n    { id: \"2\", company: \"Acme Co.\", isCurrent: false },\n    { id: \"3\", company: \"Biffco Enterprises Ltd.\", isCurrent: false },\n  ];\n\n  // Handle mouse enter - temporarily expand if collapsed and not mobile and not pinned and hover not disabled\n  const handleMouseEnter = React.useCallback(() => {\n    if (!isMobile && isCollapsed && !isPinned && !hoverDisabled) {\n      setIsHovered(true);\n      setShowContent(false); // Hide content immediately\n      setOpen(true); // Use the proper hook to expand\n\n      // Show content after sidebar has fully expanded\n      setTimeout(() => {\n        setShowContent(true);\n      }, 400);\n    }\n  }, [isMobile, isCollapsed, isPinned, hoverDisabled, setOpen]);\n\n  // Handle mouse leave - collapse back if not pinned and not mobile\n  const handleMouseLeave = React.useCallback(() => {\n    if (!isMobile && isHovered && !isPinned) {\n      setIsHovered(false);\n      // Hide content immediately, then collapse sidebar\n      setShowContent(false);\n      setOpen(false); // Use the proper hook to collapse\n      // Close dropdowns when sidebar collapses\n      setIsProfileOpen(false);\n      setIsAppsOpen(false);\n    }\n  }, [isMobile, isHovered, isPinned, setOpen]);\n\n  // Handle pin/unpin toggle\n  const handlePinToggle = React.useCallback(() => {\n    if (isPinned) {\n      // Unpin - immediately collapse and disable hover temporarily\n      setIsPinned(false);\n      setIsHovered(false);\n      setShowContent(false);\n      setOpen(false);\n      setHoverDisabled(true);\n    } else {\n      // Pin - keep open and disable hover behavior (push mode)\n      setIsPinned(true);\n      setIsHovered(false);\n      setOpen(true);\n      setShowContent(true);\n    }\n  }, [isPinned, setOpen]);\n\n  // Re-enable hover after unpinning with proper cleanup\n  React.useEffect(() => {\n    if (hoverDisabled) {\n      const timeoutId = setTimeout(() => {\n        setHoverDisabled(false);\n      }, 300);\n\n      return () => clearTimeout(timeoutId);\n    }\n  }, [hoverDisabled]);\n\n  // Handle account switching\n  const handleAccountSwitch = React.useCallback(\n    (account: { id: string; company: string; isCurrent: boolean }) => {\n      // Update current account with new company context\n      setCurrentAccount((prev) => ({\n        ...prev,\n        company: account.company,\n        // Role would be updated based on the selected account\n        role:\n          account.company === \"Acme Co.\"\n            ? \"Operations Manager\"\n            : account.company === \"Biffco Enterprises Ltd.\"\n              ? \"Business Analyst\"\n              : \"Senior Product Manager\",\n      }));\n      setIsSwitchAccountOpen(false);\n    },\n    [],\n  );\n\n  // Handle app selection\n  const handleAppSelect = React.useCallback(\n    (app: { id: string; name: string; description: string; icon: string }) => {\n      setIsAppsOpen(false);\n      console.log(`Selected app: ${app.name}`);\n    },\n    [],\n  );\n\n  // Sync showContent with sidebar state when not hovering\n  React.useEffect(() => {\n    if (!isHovered) {\n      setShowContent(!isCollapsed);\n    }\n  }, [isCollapsed, isHovered]);\n\n  const mainNavItems: NavItem[] = [\n    {\n      title: \"Home\",\n      href: \"/\",\n      icon: (\n        <svg\n          className=\"size-4\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          viewBox=\"0 0 24 24\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z\"\n          />\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M8 5a2 2 0 012-2h4a2 2 0 012 2v6H8V5z\"\n          />\n        </svg>\n      ),\n    },\n    {\n      title: \"Projects\",\n      href: \"/projects\",\n      icon: (\n        <svg\n          className=\"size-4\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          viewBox=\"0 0 24 24\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10\"\n          />\n        </svg>\n      ),\n    },\n    {\n      title: \"Databases\",\n      href: \"/databases\",\n      icon: (\n        <svg\n          className=\"size-4\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          viewBox=\"0 0 24 24\"\n        >\n          <ellipse cx=\"12\" cy=\"5\" rx=\"9\" ry=\"3\" />\n          <path d=\"M3 12a9 3 0 0 0 18 0\" />\n          <path d=\"M3 19a9 3 0 0 0 18 0\" />\n        </svg>\n      ),\n    },\n    {\n      title: \"Tables\",\n      href: \"/tables\",\n      icon: (\n        <svg\n          className=\"size-4\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          viewBox=\"0 0 24 24\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M3 10h18M3 14h18m-9-4v8m-7 0V4a1 1 0 011-1h16a1 1 0 011 1v16a1 1 0 01-1 1H4a1 1 0 01-1-1z\"\n          />\n        </svg>\n      ),\n      badge: {\n        text: \"Beta\",\n      },\n    },\n    {\n      title: \"AI\",\n      href: \"/ai\",\n      icon: (\n        <svg\n          className=\"size-4\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          viewBox=\"0 0 24 24\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z\"\n          />\n        </svg>\n      ),\n      badge: {\n        text: \"Alpha\",\n      },\n    },\n  ];\n\n  const toolsNavItems: NavItem[] = [\n    {\n      title: \"Alerts\",\n      href: \"/alerts\",\n      icon: (\n        <svg\n          className=\"size-4\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          viewBox=\"0 0 24 24\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M15 17h5l-5 5v-5zM4.828 7l2.586 2.586a2 2 0 002.828 0L12.828 7H4.828zM4.828 17H12l-2.586-2.586a2 2 0 00-2.828 0L4.828 17z\"\n          />\n        </svg>\n      ),\n    },\n    {\n      title: \"Analytics\",\n      href: \"/analytics\",\n      icon: (\n        <svg\n          className=\"size-4\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          viewBox=\"0 0 24 24\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\"\n          />\n        </svg>\n      ),\n    },\n    {\n      title: \"History\",\n      href: \"/history\",\n      icon: (\n        <svg\n          className=\"size-4\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          viewBox=\"0 0 24 24\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\"\n          />\n        </svg>\n      ),\n    },\n    {\n      title: \"More\",\n      href: \"/more\",\n      icon: (\n        <svg\n          className=\"size-4\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          viewBox=\"0 0 24 24\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z\"\n          />\n        </svg>\n      ),\n    },\n  ];\n\n  return (\n    <div\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      className={cn(\n        \"h-full z-50\",\n        // Overlay mode when hovering (not pinned)\n        isHovered && !isPinned && !isMobile && \"sidebar-overlay-mode\",\n      )}\n    >\n      <Sidebar variant=\"sidebar\" collapsible=\"icon\">\n        <SidebarHeader className=\"sticky top-0 z-10 bg-sidebar border-b border-sidebar-border\">\n          <div className=\"p-1\">\n            <Logo collapsed={isCollapsed} inSidebar={true} />\n          </div>\n        </SidebarHeader>\n\n        <SidebarContent className=\"transition-all duration-300 ease-in-out\">\n          {/* Search Section */}\n          <SidebarGroup className=\"border-b border-sidebar-border\">\n            <SidebarGroupContent>\n              <div className=\"relative overflow-hidden\">\n                {/* Collapsed: Search icon */}\n                <div\n                  className={cn(\n                    \"flex justify-center transition-all duration-300 ease-in-out\",\n                    isCollapsed\n                      ? \"opacity-100 translate-x-0\"\n                      : \"opacity-0 -translate-x-full absolute\",\n                  )}\n                >\n                  <button className=\"flex items-center justify-center w-8 h-8 rounded-md hover:bg-sidebar-accent hover:text-sidebar-accent-foreground transition-colors\">\n                    <svg\n                      className=\"size-4\"\n                      fill=\"none\"\n                      stroke=\"currentColor\"\n                      viewBox=\"0 0 24 24\"\n                    >\n                      <path\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        strokeWidth={2}\n                        d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\n                      />\n                    </svg>\n                  </button>\n                </div>\n\n                {/* Expanded: Search input */}\n                <div\n                  className={cn(\n                    \"px-2 transition-all duration-300 ease-in-out\",\n                    isCollapsed\n                      ? \"opacity-0 translate-x-full absolute\"\n                      : \"opacity-100 translate-x-0\",\n                  )}\n                >\n                  <div className=\"relative\">\n                    <Input\n                      type=\"search\"\n                      placeholder=\"Search...\"\n                      className=\"pl-3 pr-10\"\n                    />\n                    <svg\n                      className=\"absolute top-2.5 right-3 size-4 text-muted-foreground\"\n                      fill=\"none\"\n                      stroke=\"currentColor\"\n                      viewBox=\"0 0 24 24\"\n                    >\n                      <path\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        strokeWidth={2}\n                        d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\n                      />\n                    </svg>\n                  </div>\n                </div>\n              </div>\n            </SidebarGroupContent>\n          </SidebarGroup>\n\n          {/* Main Nav Items */}\n          <SidebarGroup>\n            <SidebarGroupContent>\n              <SidebarMenu>\n                {mainNavItems.map((item) => (\n                  <SidebarMenuItem key={item.href}>\n                    <NavItem\n                      href={item.href}\n                      isActive={\n                        pathname === item.href ||\n                        (item.href === \"/\" &&\n                          (pathname === \"/\" || pathname === \"\"))\n                      }\n                      tooltip={item.title}\n                    >\n                      {item.icon}\n                      <span>{item.title}</span>\n                      {item.badge && (\n                        <SidebarMenuBadge\n                          className={cn(\n                            \"transition-all duration-300 ease-in-out\",\n                            showContent ? \"opacity-100\" : \"opacity-0\",\n                          )}\n                        >\n                          {item.badge.text}\n                        </SidebarMenuBadge>\n                      )}\n                    </NavItem>\n                  </SidebarMenuItem>\n                ))}\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n\n          {/* Tools Nav Items */}\n          <SidebarGroup>\n            <SidebarGroupContent>\n              <SidebarMenu>\n                {toolsNavItems.map((item) => (\n                  <SidebarMenuItem key={item.href}>\n                    <NavItem\n                      href={item.href}\n                      isActive={\n                        pathname === item.href ||\n                        (item.href === \"/\" &&\n                          (pathname === \"/\" || pathname === \"\"))\n                      }\n                      tooltip={item.title}\n                    >\n                      {item.icon}\n                      <span>{item.title}</span>\n                      {item.badge && (\n                        <SidebarMenuBadge\n                          className={cn(\n                            \"transition-all duration-300 ease-in-out\",\n                            showContent ? \"opacity-100\" : \"opacity-0\",\n                          )}\n                        >\n                          {item.badge.text}\n                        </SidebarMenuBadge>\n                      )}\n                    </NavItem>\n                  </SidebarMenuItem>\n                ))}\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n        </SidebarContent>\n\n        {/* Quick Actions - Above Avatar */}\n        <div className=\"border-t border-sidebar-border\">\n          <SidebarGroup>\n            <SidebarGroupContent>\n              <SidebarMenu>\n                <SidebarMenuItem>\n                  <NavItem\n                    href=\"/notifications\"\n                    tooltip=\"Notifications\"\n                    isActive={pathname === \"/notifications\"}\n                  >\n                    <svg\n                      className=\"size-4\"\n                      fill=\"none\"\n                      stroke=\"currentColor\"\n                      viewBox=\"0 0 24 24\"\n                    >\n                      <path\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        strokeWidth={2}\n                        d=\"M15 17h5l-5 5v-5zM4.828 7l2.586 2.586a2 2 0 002.828 0L12.828 7H4.828zM4.828 17H12l-2.586-2.586a2 2 0 00-2.828 0L4.828 17z\"\n                      />\n                    </svg>\n                    <span>Notifications</span>\n                    <SidebarMenuBadge\n                      className={cn(\n                        \"transition-all duration-300 ease-in-out\",\n                        showContent ? \"opacity-100\" : \"opacity-0\",\n                      )}\n                    >\n                      3\n                    </SidebarMenuBadge>\n                  </NavItem>\n                </SidebarMenuItem>\n                <SidebarMenuItem>\n                  <NavItem\n                    href=\"/messages\"\n                    tooltip=\"Messages\"\n                    isActive={pathname === \"/messages\"}\n                  >\n                    <svg\n                      className=\"size-4\"\n                      fill=\"none\"\n                      stroke=\"currentColor\"\n                      viewBox=\"0 0 24 24\"\n                    >\n                      <path\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        strokeWidth={2}\n                        d=\"M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\"\n                      />\n                    </svg>\n                    <span>Messages</span>\n                  </NavItem>\n                </SidebarMenuItem>\n                <SidebarMenuItem>\n                  <DropdownMenu open={isAppsOpen} onOpenChange={setIsAppsOpen}>\n                    <DropdownMenuTrigger asChild>\n                      <SidebarMenuButton\n                        tooltip=\"Apps\"\n                        type=\"button\"\n                        onClick={(e) => e.preventDefault()}\n                      >\n                        <svg\n                          className=\"size-4\"\n                          fill=\"none\"\n                          stroke=\"currentColor\"\n                          viewBox=\"0 0 24 24\"\n                        >\n                          <path\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            strokeWidth={2}\n                            d=\"M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z\"\n                          />\n                        </svg>\n                        <span>Apps</span>\n                        <Icons.chevronRight className=\"h-4 w-4 text-sidebar-foreground/60 ml-auto\" />\n                      </SidebarMenuButton>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent\n                      className=\"w-60 p-0\"\n                      align=\"start\"\n                      side=\"right\"\n                      sideOffset={8}\n                    >\n                      {/* Apps Header */}\n                      <div className=\"p-3 border-b border-border\">\n                        <h3 className=\"text-sm font-medium text-foreground\">\n                          Your Products\n                        </h3>\n                        <p className=\"text-xs text-muted-foreground\">\n                          Products you have access to under{\" \"}\n                          {currentAccount.company}\n                        </p>\n                      </div>\n\n                      {/* Apps List */}\n                      <DropdownMenuGroup>\n                        {dtnProducts.map((app) => (\n                          <DropdownMenuItem\n                            key={app.id}\n                            onClick={() => handleAppSelect(app)}\n                          >\n                            <i className={`fa-solid fa-${app.icon} text-lg`}></i>\n                            <span>{app.name}</span>\n                          </DropdownMenuItem>\n                        ))}\n                      </DropdownMenuGroup>\n                    </DropdownMenuContent>\n                  </DropdownMenu>\n                </SidebarMenuItem>\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n        </div>\n\n        {/* Sidebar Footer - Sticky */}\n        <div className=\"sticky z-10 bg-sidebar border-t border-sidebar-border\">\n          <SidebarGroup>\n            <SidebarGroupContent>\n              <SidebarMenu>\n                {/* User Info with Profile Dropdown */}\n                <SidebarMenuItem className=\"list-none\">\n                  <DropdownMenu open={isProfileOpen} onOpenChange={setIsProfileOpen}>\n                    <DropdownMenuTrigger asChild>\n                      <SidebarMenuButton\n                        tooltip=\"Profile\"\n                        type=\"button\"\n                        onClick={(e) => e.preventDefault()}\n                      >\n                        <Avatar className=\"size-8\">\n                          <AvatarImage\n                            src=\"https://images.unsplash.com/photo-1494790108755-2616b612b786?w=32&h=32&fit=crop&crop=face\"\n                            alt={currentAccount.name}\n                          />\n                          <AvatarFallback className=\"bg-primary text-primary-foreground\">\n                            <span className=\"text-xs font-medium\">\n                              {currentAccount.initials}\n                            </span>\n                          </AvatarFallback>\n                        </Avatar>\n                        {!isCollapsed && (\n                          <span className=\"text-sm font-medium text-sidebar-foreground truncate flex-1 min-w-0\">\n                            {currentAccount.name}\n                          </span>\n                        )}\n                        {!isCollapsed && (\n                          <Icons.chevronRight className=\"h-4 w-4 text-sidebar-foreground/60 ml-auto\" />\n                        )}\n                      </SidebarMenuButton>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent\n                      className=\"w-64 p-0\"\n                      align=\"start\"\n                      side=\"right\"\n                      sideOffset={8}\n                    >\n                      {/* Profile Header */}\n                      <ProfileMenuHeader\n                        name={currentAccount.name}\n                        email={currentAccount.email}\n                        company={currentAccount.company}\n                        role={currentAccount.role}\n                        avatar={{\n                          src: \"https://images.unsplash.com/photo-1494790108755-2616b612b786?w=48&h=48&fit=crop&crop=face\",\n                          alt: currentAccount.name,\n                          initials: currentAccount.initials,\n                        }}\n                      />\n\n                      {/* Switch Account Submenu */}\n                      <DropdownMenuGroup>\n                        <DropdownMenuSub>\n                          <DropdownMenuSubTrigger>\n                            <Icons.user />\n                            <span>Switch Account</span>\n                          </DropdownMenuSubTrigger>\n                          <DropdownMenuSubContent>\n                            {allAccounts.map((account) => (\n                              <DropdownMenuItem\n                                key={account.id}\n                                onClick={() => handleAccountSwitch(account)}\n                                className={cn(\n                                  account.isCurrent\n                                    ? \"bg-primary/10 text-primary\"\n                                    : \"\"\n                                )}\n                              >\n                                <div className={cn(\n                                  \"size-2 rounded-full mr-2\",\n                                  account.isCurrent\n                                    ? \"bg-primary\"\n                                    : \"bg-muted-foreground/30\"\n                                )} />\n                                <span className=\"flex-1\">{account.company}</span>\n                                {account.isCurrent && (\n                                  <span className=\"text-xs text-primary font-medium\">\n                                    Current\n                                  </span>\n                                )}\n                              </DropdownMenuItem>\n                            ))}\n                          </DropdownMenuSubContent>\n                        </DropdownMenuSub>\n                      </DropdownMenuGroup>\n\n                      <DropdownMenuSeparator />\n\n                      {/* Settings */}\n                      <DropdownMenuGroup>\n                        <DropdownMenuItem asChild>\n                          <a href=\"/settings\">\n                            <Icons.cog />\n                            <span>Settings</span>\n                          </a>\n                        </DropdownMenuItem>\n                      </DropdownMenuGroup>\n\n                      <DropdownMenuSeparator />\n\n                      {/* Logout */}\n                      <DropdownMenuGroup>\n                        <DropdownMenuItem\n                          variant=\"destructive\"\n                          onClick={() => {\n                            console.log(\"Logout clicked\");\n                          }}\n                        >\n                          <Icons.rightFromBracket />\n                          <span>Log out</span>\n                        </DropdownMenuItem>\n                      </DropdownMenuGroup>\n                    </DropdownMenuContent>\n                  </DropdownMenu>\n                </SidebarMenuItem>\n                </SidebarMenu>\n              </SidebarGroupContent>\n            </SidebarGroup>\n\n          {/* Pin Sidebar Toggle - Separate Group */}\n          <div className=\"border-t border-sidebar-border\">\n            <SidebarGroup className=\"h-12\">\n              <SidebarGroupContent>\n                <SidebarMenu>\n                  <SidebarMenuItem>\n                    <NavButton\n                      onClick={handlePinToggle}\n                      tooltip={isPinned ? \"Unpin sidebar\" : \"Pin sidebar open\"}\n                      aria-label={isPinned ? \"Unpin sidebar\" : \"Pin sidebar open\"}\n                      aria-pressed={isPinned}\n                    >\n                      {isPinned ? (\n                        <>\n                          <svg\n                            className=\"size-4\"\n                            fill=\"none\"\n                            stroke=\"currentColor\"\n                            viewBox=\"0 0 24 24\"\n                            aria-hidden=\"true\"\n                          >\n                            <path\n                              strokeLinecap=\"round\"\n                              strokeLinejoin=\"round\"\n                              strokeWidth={2}\n                              d=\"M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z\"\n                            />\n                          </svg>\n                          <span>Unpin</span>\n                        </>\n                      ) : (\n                        <>\n                          <svg\n                            className=\"size-4\"\n                            fill=\"none\"\n                            stroke=\"currentColor\"\n                            viewBox=\"0 0 24 24\"\n                            aria-hidden=\"true\"\n                          >\n                            <path\n                              strokeLinecap=\"round\"\n                              strokeLinejoin=\"round\"\n                              strokeWidth={2}\n                              d=\"M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z\"\n                            />\n                          </svg>\n                          <span>Pin</span>\n                        </>\n                      )}\n                    </NavButton>\n                  </SidebarMenuItem>\n                </SidebarMenu>\n              </SidebarGroupContent>\n            </SidebarGroup>\n          </div>\n        </div>\n      </Sidebar>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "src/layouts/shell-layout.tsx",
      "content": "\"use client\";\n\nimport { Inter, Geist_Mono, Montserrat } from \"next/font/google\";\nimport React, { type ReactNode } from \"react\";\n\nimport { BrandHeader } from \"@/components/brand-header\";\nimport { BrandSidebar } from \"@/components/brand-sidebar\";\nimport { SidebarProvider } from \"@/components/ui/sidebar\";\nimport { Toaster } from \"@/components/ui/sonner\";\nimport { cn } from \"@/lib/utils\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\n\nimport \"@/app/globals.css\";\n\nconst InterSans = Inter({\n  subsets: [\"latin\"],\n  variable: \"--font-sans\",\n});\n\nconst GeistMono = Geist_Mono({\n  subsets: [\"latin\"],\n  variable: \"--font-mono\",\n});\n\nconst MontserratSerif = Montserrat({\n  subsets: [\"latin\"],\n  variable: \"--font-serif\",\n});\n\nexport default function ShellLayout({\n  children,\n}: Readonly<{\n  children: ReactNode;\n}>) {\n  const isMobile = useIsMobile();\n\n  return (\n    <html\n      lang=\"en\"\n      className={cn(\n        InterSans.variable,\n        GeistMono.variable,\n        MontserratSerif.variable,\n        \"bg-background text-foreground\",\n      )}\n    >\n      <body>\n        <SidebarProvider defaultOpen={false}>\n          {isMobile && <BrandHeader />}\n          <BrandSidebar />\n          <main className=\"flex w-full\">\n            <div className=\"w-full\">{children}</div>\n          </main>\n          <Toaster />\n        </SidebarProvider>\n      </body>\n    </html>\n  );\n}\n",
      "type": "registry:file",
      "target": "app/layout.tsx"
    },
    {
      "path": "src/app/demo/[name]/blocks/blank-page.tsx",
      "content": "export default function BlankPage() {\n  return (\n    <div className=\"flex flex-col items-center justify-center gap-4 rounded-md py-96\">\n      <div className=\"text-muted-foreground\">\n        Start prompting to use your component!\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/page.tsx"
    }
  ]
}