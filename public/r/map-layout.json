{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "map-layout",
  "type": "registry:block",
  "title": "Map Layout",
  "description": "A layout optimized for map-based applications",
  "registryDependencies": [
    "sidebar",
    "button",
    "avatar",
    "input",
    "icons",
    "breadcrumb",
    "https://eco-design-system-2.vercel.app/r/styles/sonner.json",
    "https://eco-design-system-2.vercel.app/r/components/panel.json",
    "https://eco-design-system-2.vercel.app/r/components/brand-header.json",
    "https://eco-design-system-2.vercel.app/r/components/brand-sidebar.json",
    "https://eco-design-system-2.vercel.app/r/themes/theme.json"
  ],
  "files": [
    {
      "path": "src/layouts/shell-layout.tsx",
      "content": "import { Geist_Mono, Inter, Montserrat } from \"next/font/google\";\nimport React, { type ReactNode } from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nimport \"@/app/globals.css\";\n\nconst InterSans = Inter({\n  subsets: [\"latin\"],\n  variable: \"--font-sans\",\n});\n\nconst GeistMono = Geist_Mono({\n  subsets: [\"latin\"],\n  variable: \"--font-mono\",\n});\n\nconst MontserratSerif = Montserrat({\n  subsets: [\"latin\"],\n  variable: \"--font-serif\",\n});\n\nexport default function ShellLayout({\n  children,\n}: Readonly<{\n  children: ReactNode;\n}>) {\n  return (\n    <html\n      lang=\"en\"\n      className={cn(\n        InterSans.variable,\n        GeistMono.variable,\n        MontserratSerif.variable,\n        \"bg-background text-foreground\",\n      )}\n    >\n      <body>\n        <main className=\"flex w-full\">\n          <div className=\"w-full\">{children}</div>\n        </main>\n      </body>\n    </html>\n  );\n}\n",
      "type": "registry:file",
      "target": "app/layout.tsx"
    },
    {
      "path": "src/components/ui/header.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbList,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n} from \"@/components/ui/breadcrumb\";\n\n/**\n * Header component for creating flexible headers that can contain controls for panels.\n *\n * Features:\n * - Flexible layout with left and right content areas\n * - Built-in breadcrumb support\n * - Button and control placement on the right\n * - Consistent styling with design system\n * - Responsive design\n *\n * @example\n * ```tsx\n * <Header\n *   breadcrumbs={[\n *     { label: \"Home\", href: \"/\" },\n *     { label: \"Weather Dashboard\", href: \"/dashboard\" }\n *   ]}\n *   rightContent={<Button>Secondary</Button>}\n * />\n * ```\n */\n\ninterface BreadcrumbItem {\n  label: string;\n  href?: string;\n}\n\ninterface HeaderProps {\n  /** Breadcrumb navigation items */\n  breadcrumbs?: BreadcrumbItem[];\n  /** Content to display on the left side (overrides breadcrumbs) */\n  leftContent?: React.ReactNode;\n  /** Content to display on the right side (buttons, controls, etc.) */\n  rightContent?: React.ReactNode;\n  /** Additional CSS classes */\n  className?: string;\n}\n\n/**\n * Header component for creating flexible headers with breadcrumbs and controls.\n *\n * @param props - Header component props\n * @returns JSX element\n */\nexport function Header({\n  breadcrumbs,\n  leftContent,\n  rightContent,\n  className,\n  ...props\n}: HeaderProps) {\n  return (\n    <header\n      className={cn(\n        \"flex w-full h-12 items-center justify-between border-b border-border bg-background px-3 py-2 shadow-sm\",\n        className\n      )}\n      {...props}\n    >\n      {/* Left side content */}\n      <div className=\"flex items-center\">\n        {leftContent ? (\n          leftContent\n        ) : breadcrumbs ? (\n          <Breadcrumb>\n            <BreadcrumbList>\n              {breadcrumbs.map((item, index) => (\n                <React.Fragment key={index}>\n                  {index > 0 && <BreadcrumbSeparator />}\n                  <BreadcrumbItem>\n                    {item.href ? (\n                      <BreadcrumbLink href={item.href}>\n                        {item.label}\n                      </BreadcrumbLink>\n                    ) : (\n                      <BreadcrumbPage>{item.label}</BreadcrumbPage>\n                    )}\n                  </BreadcrumbItem>\n                </React.Fragment>\n              ))}\n            </BreadcrumbList>\n          </Breadcrumb>\n        ) : null}\n      </div>\n\n      {/* Right side content */}\n      {rightContent && (\n        <div className=\"flex items-center space-x-2\">\n          {rightContent}\n        </div>\n      )}\n    </header>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/ui/header.tsx"
    },
    {
      "path": "src/components/ui/map.tsx",
      "content": "\"use client\";\n\nimport { useEffect, useRef, useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Navigation,\n  ZoomIn,\n  ZoomOut,\n  MapPin,\n  RotateCcw,\n  Map as MapIcon\n} from \"lucide-react\";\n\n// Import Mapbox CSS\nimport \"mapbox-gl/dist/mapbox-gl.css\";\n\n// Import mapbox-gl with proper type handling\nimport mapboxgl from \"mapbox-gl\";\n\n/**\n * Map component with Mapbox integration for the DTN design system.\n *\n * **Features:**\n * - Mapbox GL JS integration with free tier support\n * - Theme-aware styling (light/dark mode)\n * - Built-in controls (zoom, navigation, geolocation)\n * - Accessibility support with proper ARIA labels\n * - Customizable styling with className support\n * - TypeScript definitions for all props\n * - Responsive design with proper sizing\n *\n * **Required Props:**\n * - `accessToken`: Your Mapbox access token\n *\n * **Optional Props:**\n * - `className`: Additional CSS classes\n * - `center`: Initial map center [lng, lat] (default: [-98.5795, 39.8283])\n * - `zoom`: Initial zoom level (default: 4)\n * - `style`: Mapbox style URL (auto-detected based on theme)\n * - `showControls`: Show built-in controls (default: true)\n * - `showNavigation`: Show navigation control (default: true)\n * - `showZoom`: Show zoom controls (default: true)\n * - `showGeolocation`: Show geolocation button (default: true)\n * - `showReset`: Show reset button (default: true)\n * - `height`: Map height (default: \"400px\")\n * - `width`: Map width (default: \"100%\")\n *\n * **Theme Integration:**\n * - Automatically switches between light and dark map styles\n * - Uses CSS variables for consistent theming\n * - Supports both light and dark mode\n *\n * **Usage Examples:**\n * ```tsx\n * // Basic map\n * <Map accessToken=\"your-mapbox-token\" />\n *\n * // Custom center and zoom\n * <Map\n *   accessToken=\"your-mapbox-token\"\n *   center={[-74.006, 40.7128]}\n *   zoom={12}\n * />\n *\n * // Custom height and styling\n * <Map\n *   accessToken=\"your-mapbox-token\"\n *   height=\"500px\"\n *   className=\"rounded-lg border\"\n * />\n *\n * // Minimal controls\n * <Map\n *   accessToken=\"your-mapbox-token\"\n *   showControls={false}\n * />\n * ```\n */\n\nexport interface MapProps {\n  /** Mapbox access token - required for map functionality */\n  accessToken: string;\n  /** Additional CSS classes */\n  className?: string;\n  /** Initial map center coordinates [longitude, latitude] */\n  center?: [number, number];\n  /** Initial zoom level */\n  zoom?: number;\n  /** Custom Mapbox style URL - overrides theme-based selection */\n  style?: string;\n  /** Show built-in control buttons */\n  showControls?: boolean;\n  /** Show navigation control (compass) */\n  showNavigation?: boolean;\n  /** Show zoom in/out buttons */\n  showZoom?: boolean;\n  /** Show geolocation button */\n  showGeolocation?: boolean;\n  /** Show reset button */\n  showReset?: boolean;\n  /** Map height */\n  height?: string;\n  /** Map width */\n  width?: string;\n  /** Callback when map is loaded */\n  onLoad?: (map: mapboxgl.Map) => void;\n  /** Callback when map center changes */\n  onMove?: (center: [number, number]) => void;\n  /** Callback when map zoom changes */\n  onZoom?: (zoom: number) => void;\n  /** Accessibility label for the map */\n  \"aria-label\"?: string;\n}\n\n/**\n * Get the appropriate Mapbox style based on the current theme\n */\nfunction getMapStyle(style?: string, isDark?: boolean): string {\n  if (style) return style;\n\n  // Default styles for light and dark themes\n  return isDark\n    ? \"mapbox://styles/mapbox/dark-v11\"\n    : \"mapbox://styles/mapbox/light-v11\";\n}\n\n/**\n * Get the current theme from the document\n */\nfunction getCurrentTheme(): boolean {\n  if (typeof window === \"undefined\") return false;\n  return document.documentElement.classList.contains(\"dark\");\n}\n\nexport function Map({\n  accessToken,\n  className,\n  center = [-98.5795, 39.8283], // Center of USA\n  zoom = 4,\n  style,\n  showControls = true,\n  showNavigation = true,\n  showZoom = true,\n  showGeolocation = true,\n  showReset = true,\n  height = \"400px\",\n  width = \"100%\",\n  onLoad,\n  onMove,\n  onZoom,\n  \"aria-label\": ariaLabel = \"Interactive map\",\n  ...props\n}: MapProps) {\n  const mapContainer = useRef<HTMLDivElement>(null);\n  const map = useRef<mapboxgl.Map | null>(null);\n  const [isDark, setIsDark] = useState(false);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [isMounted, setIsMounted] = useState(false);\n  const [currentCenter, setCurrentCenter] = useState<[number, number]>(center);\n  const [currentZoom, setCurrentZoom] = useState(zoom);\n  const [geolocationError, setGeolocationError] = useState<string | null>(null);\n  const [mapError, setMapError] = useState<string | null>(null);\n\n  // Handle client-side mounting\n  useEffect(() => {\n    setIsMounted(true);\n  }, []);\n\n  // Set Mapbox access token\n  useEffect(() => {\n    if (typeof window !== \"undefined\") {\n      mapboxgl.accessToken = accessToken;\n    }\n  }, [accessToken]);\n\n  // Initialize map\n  useEffect(() => {\n    if (!isMounted || !mapContainer.current || map.current || typeof window === \"undefined\") return;\n\n    try {\n      const theme = getCurrentTheme();\n      setIsDark(theme);\n\n      map.current = new mapboxgl.Map({\n        container: mapContainer.current,\n        style: getMapStyle(style, theme),\n        center: center,\n        zoom: zoom,\n        attributionControl: false,\n        ...props,\n      });\n    } catch (error) {\n      console.error('Failed to initialize map:', error);\n      setMapError('Map failed to load. Please provide a valid Mapbox access token. Get yours at mapbox.com');\n      return;\n    }\n\n    // Add attribution control in bottom-right corner\n    map.current.addControl(new mapboxgl.AttributionControl({\n      compact: true,\n    }), 'bottom-right');\n\n    // Handle map load\n    map.current.on(\"load\", () => {\n      setIsLoaded(true);\n      onLoad?.(map.current!);\n    });\n\n    // Handle map errors\n    map.current.on(\"error\", (e) => {\n      console.error('Map error:', e);\n      setMapError('Map failed to load. Please provide a valid Mapbox access token. Get yours at mapbox.com');\n    });\n\n    // Handle map movement\n    map.current.on(\"move\", () => {\n      const center = map.current!.getCenter();\n      const newCenter: [number, number] = [center.lng, center.lat];\n      setCurrentCenter(newCenter);\n      onMove?.(newCenter);\n    });\n\n    // Handle zoom changes\n    map.current.on(\"zoom\", () => {\n      const newZoom = map.current!.getZoom();\n      setCurrentZoom(newZoom);\n      onZoom?.(newZoom);\n    });\n\n    // Cleanup\n    return () => {\n      if (map.current) {\n        map.current.remove();\n        map.current = null;\n      }\n    };\n  }, [isMounted, accessToken, center, zoom, style, onLoad, onMove, onZoom, props]);\n\n  // Handle theme changes\n  useEffect(() => {\n    if (!map.current || !isLoaded) return;\n\n    const newStyle = getMapStyle(style, isDark);\n    map.current.setStyle(newStyle);\n  }, [isDark, style, isLoaded]);\n\n  // Watch for theme changes\n  useEffect(() => {\n    const observer = new MutationObserver(() => {\n      const newTheme = getCurrentTheme();\n      if (newTheme !== isDark) {\n        setIsDark(newTheme);\n      }\n    });\n\n    observer.observe(document.documentElement, {\n      attributes: true,\n      attributeFilter: [\"class\"],\n    });\n\n    return () => observer.disconnect();\n  }, [isDark]);\n\n  // Control handlers\n  const handleZoomIn = () => {\n    if (map.current) {\n      map.current.zoomIn();\n    }\n  };\n\n  const handleZoomOut = () => {\n    if (map.current) {\n      map.current.zoomOut();\n    }\n  };\n\n  const handleGeolocation = () => {\n    if (!navigator.geolocation) {\n      setGeolocationError(\"Geolocation is not supported by this browser.\");\n      return;\n    }\n\n    setGeolocationError(null);\n\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        const { longitude, latitude } = position.coords;\n        if (map.current) {\n          map.current.flyTo({\n            center: [longitude, latitude],\n            zoom: 12,\n          });\n        }\n      },\n      (error) => {\n        setGeolocationError(`Geolocation error: ${error.message}`);\n      }\n    );\n  };\n\n  const handleReset = () => {\n    if (map.current) {\n      map.current.flyTo({\n        center: center,\n        zoom: zoom,\n      });\n    }\n  };\n\n  const handleNavigation = () => {\n    if (map.current) {\n      map.current.resetNorth();\n    }\n  };\n\n  return (\n    <div className={cn(\"relative\", className)}>\n      {/* Map container */}\n      <div\n        ref={mapContainer}\n        className=\"w-full h-full\"\n        style={{ height, width }}\n        role=\"img\"\n        aria-label={ariaLabel}\n        aria-live=\"polite\"\n        aria-atomic=\"true\"\n      />\n\n      {/* Custom controls */}\n      {showControls && (\n        <div className=\"absolute top-4 right-4 flex flex-col gap-2\">\n          {/* Zoom controls */}\n          {showZoom && (\n            <div className=\"flex flex-col gap-1\">\n              <Button\n                size=\"icon-sm\"\n                variant=\"outline\"\n                onClick={handleZoomIn}\n                aria-label=\"Zoom in\"\n                className=\"bg-background/95 backdrop-blur-sm\"\n              >\n                <ZoomIn className=\"size-3\" />\n              </Button>\n              <Button\n                size=\"icon-sm\"\n                variant=\"outline\"\n                onClick={handleZoomOut}\n                aria-label=\"Zoom out\"\n                className=\"bg-background/95 backdrop-blur-sm\"\n              >\n                <ZoomOut className=\"size-3\" />\n              </Button>\n            </div>\n          )}\n\n          {/* Navigation control */}\n          {showNavigation && (\n            <Button\n              size=\"icon-sm\"\n              variant=\"outline\"\n              onClick={handleNavigation}\n              aria-label=\"Reset north\"\n              className=\"bg-background/95 backdrop-blur-sm\"\n            >\n              <Navigation className=\"size-3\" />\n            </Button>\n          )}\n\n          {/* Geolocation control */}\n          {showGeolocation && (\n            <Button\n              size=\"icon-sm\"\n              variant=\"outline\"\n              onClick={handleGeolocation}\n              aria-label=\"Find my location\"\n              className=\"bg-background/95 backdrop-blur-sm\"\n            >\n              <MapPin className=\"size-3\" />\n            </Button>\n          )}\n\n          {/* Reset control */}\n          {showReset && (\n            <Button\n              size=\"icon-sm\"\n              variant=\"outline\"\n              onClick={handleReset}\n              aria-label=\"Reset to initial view\"\n              className=\"bg-background/95 backdrop-blur-sm\"\n            >\n              <RotateCcw className=\"size-3\" />\n            </Button>\n          )}\n        </div>\n      )}\n\n      {/* Error messages */}\n      {mapError && (\n        <div className=\"absolute inset-0 flex items-center justify-center bg-background/95 backdrop-blur-sm rounded-lg border border-border\">\n          <div className=\"text-center p-6 max-w-sm\">\n            <MapIcon className=\"size-12 text-muted-foreground mx-auto mb-3\" />\n            <h3 className=\"font-medium text-sm mb-2\">Map Component</h3>\n            <p className=\"text-xs text-muted-foreground mb-3\">{mapError}</p>\n            <p className=\"text-xs text-muted-foreground\">\n              Replace <code className=\"bg-muted px-1 rounded\">pk.your-mapbox-token-here</code> with your actual token\n            </p>\n          </div>\n        </div>\n      )}\n\n      {geolocationError && !mapError && (\n        <div className=\"absolute bottom-4 left-4 right-4 bg-destructive text-destructive-foreground p-3 rounded-lg text-sm\">\n          {geolocationError}\n        </div>\n      )}\n\n      {/* Loading indicator */}\n      {(!isMounted || !isLoaded) && !mapError && (\n        <div className=\"absolute inset-0 flex items-center justify-center bg-muted/50 rounded-lg\">\n          <div className=\"flex items-center gap-2 text-muted-foreground\">\n            <MapIcon className=\"size-4 animate-pulse\" />\n            <span className=\"text-sm\">{!isMounted ? \"Initializing...\" : \"Loading map...\"}</span>\n          </div>\n        </div>\n      )}\n\n      {/* Map info */}\n      {isLoaded && showControls && (\n        <div className=\"absolute bottom-4 left-4 bg-background/95 backdrop-blur-sm px-3 py-2 rounded-lg text-xs text-muted-foreground border border-border\">\n          <div>Center: {currentCenter[1].toFixed(4)}, {currentCenter[0].toFixed(4)}</div>\n          <div>Zoom: {currentZoom.toFixed(1)}</div>\n        </div>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/ui/map.tsx"
    },
    {
      "path": "src/app/demo/[name]/blocks/map-layout-page.tsx",
      "content": "\"use client\";\n\n/**\n * Map Layout Page Component\n *\n * A clean full-screen map layout with panel wrapper:\n * - Header with breadcrumbs and actions\n * - Full-screen interactive map wrapped in a panel (no panel header/footer)\n * - Panel provides content area only - maximum map space\n * - Responsive design for mobile and desktop\n * - Layout-agnostic - ready for integration with sidebar/header\n * - Uses Panel, Header, Button, and Map components\n *\n * @returns JSX element with full-screen map layout ready for layout integration\n */\nimport { Panel } from \"@/components/panel\";\nimport { Button } from \"@/components/ui/button\";\nimport { Header } from \"@/components/ui/header\";\nimport { Map } from \"@/components/ui/map\";\nimport { useState } from \"react\";\n\nexport default function MapLayoutPage() {\n  const [mapCenter, setMapCenter] = useState<[number, number]>([\n    -98.5795, 39.8283,\n  ]);\n  const [mapZoom, setMapZoom] = useState(4);\n\n  // Mapbox access token - replace with your own token\n  const MAPBOX_TOKEN =\n    \"pk.eyJ1Ijoic3RhbnhhZiIsImEiOiJjbWcwODl2N2UwYTN1MmpzOW1oYXRzbXRxIn0.QsDOJWYQe4_jQFc11bVBlQ\";\n\n  const handleMapMove = (center: [number, number]) => {\n    setMapCenter(center);\n  };\n\n  const handleMapZoom = (zoom: number) => {\n    setMapZoom(zoom);\n  };\n\n  return (\n    <div className=\"w-full h-screen flex flex-col\">\n      {/* Header with breadcrumbs */}\n      <Header\n        breadcrumbs={[{ label: \"Weather Hub\", href: \"/\" }, { label: \"Map\" }]}\n        rightContent={<Button variant=\"outline\">Settings</Button>}\n      />\n\n      {/* Full Screen Map Panel */}\n      <Panel\n        size=\"full\"\n        hideHeader={true}\n        hideFooter={true}\n        className=\"w-full h-full\"\n        borderRight={false}\n      >\n        {/* Map Component - Full screen */}\n        <div className=\"absolute inset-0 left-0 right-0 top-0 bottom-0\">\n          <Map\n            accessToken={MAPBOX_TOKEN}\n            center={mapCenter}\n            zoom={mapZoom}\n            height=\"100%\"\n            width=\"100%\"\n            onMove={handleMapMove}\n            onZoom={handleMapZoom}\n            showControls={false}\n            showNavigation={false}\n            showZoom={false}\n            showGeolocation={false}\n            showReset={false}\n            className=\"h-full w-full\"\n            aria-label=\"Interactive map\"\n          />\n        </div>\n      </Panel>\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/page.tsx"
    },
    {
      "path": "src/components/panel.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport type * as React from \"react\";\n// Removed external component imports for v0 compatibility\n\n/**\n * Panel component for creating flexible layouts with header, content, and footer areas.\n *\n * Features:\n * - Responsive sizing with flexible column system\n * - Header with title and action button\n * - Content area with proper spacing\n * - Footer with status information\n * - Customizable alignment and justification\n * - Border and styling options\n *\n * @example\n * ```tsx\n * // Basic panel with default 100% height (fills parent container)\n * <Panel size=\"4\" title=\"My Panel\" footer={<span>Status: Active</span>}>\n *   <div>Panel content goes here</div>\n * </Panel>\n *\n * // Panel with full screen height (100vh)\n * <Panel height=\"screen\" title=\"My Panel\">\n *   <div>Panel content goes here</div>\n * </Panel>\n *\n * // Panel with custom header and full height\n * <Panel height=\"full\" header={\n *   <div className=\"flex items-center justify-between w-full\">\n *     <h6>Custom Header</h6>\n *     <Button size=\"sm\">Action</Button>\n *   </div>\n * }>\n *   <div>Panel content with custom header</div>\n * </Panel>\n *\n * // Panel with responsive sizing and full height\n * <Panel\n *   size=\"6\"\n *   height=\"full\"\n *   responsive={{ md: \"4\", lg: \"3\" }}\n *   title=\"Responsive Panel\"\n * >\n *   <div>Content adapts to screen size</div>\n * </Panel>\n * ```\n */\n\ntype ColumnSize =\n  | \"auto\"\n  | \"1\"\n  | \"2\"\n  | \"3\"\n  | \"4\"\n  | \"5\"\n  | \"6\"\n  | \"12\"\n  | \"full\"\n  | \"fit\";\n\n/**\n * Props for the Panel component\n */\ninterface PanelProps {\n  /** Sizing */\n  /** Panel size using flexible column system */\n  size?: ColumnSize;\n  /** Responsive sizing for different breakpoints */\n  responsive?: {\n    sm?: ColumnSize;\n    md?: ColumnSize;\n    lg?: ColumnSize;\n    xl?: ColumnSize;\n  };\n\n  /** Layout */\n  /** Vertical alignment of panel content */\n  align?: \"start\" | \"center\" | \"end\" | \"stretch\";\n  /** Horizontal justification of panel content */\n  justify?: \"start\" | \"center\" | \"end\" | \"between\" | \"around\" | \"evenly\";\n\n  /** Content areas */\n  /** Panel title displayed in header */\n  title?: string;\n  /** Custom header content (overrides title) */\n  header?: React.ReactNode;\n  /** Whether to hide the header completely */\n  hideHeader?: boolean;\n  /** Main panel content */\n  children?: React.ReactNode;\n  /** Footer content with status information */\n  footer?: React.ReactNode;\n  /** Whether to hide the footer completely */\n  hideFooter?: boolean;\n\n  /** Styling */\n  /** Whether to show right border */\n  borderRight?: boolean;\n  /** Height behavior: 'screen' for 100vh, 'full' for 100% of parent */\n  height?: \"screen\" | \"full\";\n  /** Additional CSS classes */\n  className?: string;\n}\n\nconst sizeClasses = {\n  auto: \"flex-auto\",\n  \"1\": \"flex-[0_0_8.333333%]\",\n  \"2\": \"flex-[0_0_16.666667%]\",\n  \"3\": \"flex-[0_0_25%]\",\n  \"4\": \"flex-[0_0_33.333333%]\",\n  \"5\": \"flex-[0_0_41.666667%]\",\n  \"6\": \"flex-[0_0_50%]\",\n  \"12\": \"flex-[0_0_100%]\",\n  full: \"flex-1\",\n  fit: \"flex-none\",\n};\n\nconst alignClasses = {\n  start: \"items-start\",\n  center: \"items-center\",\n  end: \"items-end\",\n  stretch: \"items-stretch\",\n};\n\nconst justifyClasses = {\n  start: \"justify-start\",\n  center: \"justify-center\",\n  end: \"justify-end\",\n  between: \"justify-between\",\n  around: \"justify-around\",\n  evenly: \"justify-evenly\",\n};\n\nconst getResponsiveClasses = (responsive?: PanelProps[\"responsive\"]) => {\n  if (!responsive) return \"\";\n\n  const classes: string[] = [];\n\n  if (responsive.sm) classes.push(`sm:${sizeClasses[responsive.sm]}`);\n  if (responsive.md) classes.push(`md:${sizeClasses[responsive.md]}`);\n  if (responsive.lg) classes.push(`lg:${sizeClasses[responsive.lg]}`);\n  if (responsive.xl) classes.push(`xl:${sizeClasses[responsive.xl]}`);\n\n  return classes.join(\" \");\n};\n\n/**\n * Panel component for creating flexible layouts with header, content, and footer areas.\n *\n * @param props - Panel component props\n * @returns JSX element\n */\nexport function Panel({\n  size = \"auto\",\n  responsive,\n  align = \"stretch\",\n  justify = \"start\",\n  title = \"Panel\",\n  header,\n  hideHeader = false,\n  children,\n  footer,\n  hideFooter = false,\n  borderRight = true,\n  height = \"full\",\n  className,\n  ...props\n}: PanelProps) {\n  const baseSizeClass = sizeClasses[size];\n  const responsiveClasses = getResponsiveClasses(responsive);\n\n  // Determine height class based on height prop\n  const heightClass = height === \"screen\" ? \"h-screen\" : \"h-full\";\n\n  return (\n    <div\n      className={cn(\n        \"relative flex flex-col\",\n        heightClass,\n        borderRight && \"border-r border-border\",\n        baseSizeClass,\n        responsiveClasses,\n        alignClasses[align],\n        justifyClasses[justify],\n        className,\n      )}\n      {...props}\n    >\n      {!hideHeader && (\n        <div className=\"absolute top-0 left-0 right-0 z-10 flex w-full h-12 px-3 py-2 justify-between items-center border-b border-border bg-background shadow-sm\">\n          {header ? (\n            header\n          ) : (\n            <>\n              <h6>{title}</h6>\n              <Button variant=\"ghost\" size=\"icon\">\n                <svg\n                  className=\"size-4\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z\"\n                  />\n                </svg>\n              </Button>\n            </>\n          )}\n        </div>\n      )}\n\n      {children && (\n        <div\n          className={cn(\n            \"flex-1 w-full p-3 items-start self-stretch bg-background overflow-y-auto\",\n            !hideHeader && \"pt-12\", // 48px for header + 12px spacing\n            !hideHeader && \"pt-[60px]\", // 48px for header + 12px spacing\n            hideHeader && \"pt-0\", // No top padding when header is hidden\n            !hideFooter && footer && \"pb-12\", // Bottom padding only when footer exists and not hidden\n            hideFooter && \"pb-0\", // No bottom padding when footer is hidden\n          )}\n        >\n          {children}\n        </div>\n      )}\n\n      {!hideFooter && footer && (\n        <div className=\"absolute bottom-0 left-0 right-0 z-10 flex w-full h-12 min-h-10 px-3 py-2 justify-between items-center border-t border-border bg-background text-muted-foreground text-sm\">\n          {footer}\n        </div>\n      )}\n    </div>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}